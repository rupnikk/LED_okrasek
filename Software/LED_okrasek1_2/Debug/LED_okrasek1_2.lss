
LED_okrasek1_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00001192  00001226  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001192  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005d  00800108  00800108  0000122e  2**0
                  ALLOC
  3 .stab         000026b8  00000000  00000000  00001230  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012ca  00000000  00000000  000038e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00004bb2  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00004bc4  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c4 00 	jmp	0x188	; 0x188 <__ctors_end>
       4:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__bad_interrupt>
       8:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__bad_interrupt>
       c:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__bad_interrupt>
      10:	0c 94 0a 06 	jmp	0xc14	; 0xc14 <__vector_4>
      14:	0c 94 2d 07 	jmp	0xe5a	; 0xe5a <__vector_5>
      18:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__bad_interrupt>
      1c:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__bad_interrupt>
      20:	0c 94 36 06 	jmp	0xc6c	; 0xc6c <__vector_8>
      24:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__bad_interrupt>
      28:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__bad_interrupt>
      2c:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__bad_interrupt>
      30:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__bad_interrupt>
      34:	0c 94 25 06 	jmp	0xc4a	; 0xc4a <__vector_13>
      38:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__bad_interrupt>
      3c:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__bad_interrupt>
      40:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__bad_interrupt>
      44:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__bad_interrupt>
      48:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__bad_interrupt>
      4c:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__bad_interrupt>
      50:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__bad_interrupt>
      54:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__bad_interrupt>
      58:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__bad_interrupt>
      5c:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__bad_interrupt>
      60:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__bad_interrupt>
      64:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	10 00       	.word	0x0010	; ????
      6c:	2f 00       	.word	0x002f	; ????

0000006e <songs>:
      6e:	64 00 00 00 00 00 ee 00 40 00 0c 00 ee 00 40 00     d.......@.....@.
      7e:	0c 00 ee 00 40 00 0c 00 ee 00 40 00 0c 00 d4 00     ....@.....@.....
      8e:	40 00 0c 00 d4 00 40 00 0c 00 d4 00 40 00 0c 00     @.....@.....@...
      9e:	d4 00 40 00 0c 00 bd 00 40 00 0c 00 bd 00 40 00     ..@.....@.....@.
      ae:	0c 00 d4 00 40 00 0c 00 d4 00 40 00 0c 00 ee 00     ....@.....@.....
      be:	40 00 0c 00 ee 00 40 00 0c 00 ee 00 40 00 18 00     @.....@.....@...
      ce:	28 00 00 00 00 00 ee 00 40 00 18 00 d4 00 40 00     (.......@.....@.
      de:	18 00 bd 00 40 00 18 00 b2 00 40 00 18 00 9e 00     ....@.....@.....
      ee:	40 00 30 00 9e 00 40 00 30 00 8d 00 40 00 30 00     @.0...@.0...@.0.
      fe:	8d 00 40 00 30 00 9e 00 40 00 60 00 8d 00 40 00     ..@.0...@.`...@.
     10e:	30 00 8d 00 40 00 30 00 9e 00 40 00 60 00 b2 00     0...@.0...@.`...
     11e:	40 00 18 00 b2 00 40 00 18 00 b2 00 40 00 18 00     @.....@.....@...
     12e:	b2 00 40 00 18 00 bd 00 40 00 30 00 bd 00 40 00     ..@.....@.0...@.
     13e:	30 00 d4 00 40 00 30 00 d4 00 40 00 30 00 9e 00     0...@.0...@.0...
     14e:	40 00 60 00 b2 00 40 00 18 00 b2 00 40 00 18 00     @.`...@.....@...
     15e:	b2 00 40 00 18 00 b2 00 40 00 18 00 bd 00 40 00     ..@.....@.....@.
     16e:	30 00 bd 00 40 00 30 00 d4 00 40 00 30 00 d4 00     0...@.0...@.0...
     17e:	40 00 30 00 ee 00 40 00 60 00                       @.0...@.`.

00000188 <__ctors_end>:
     188:	11 24       	eor	r1, r1
     18a:	1f be       	out	0x3f, r1	; 63
     18c:	cf ef       	ldi	r28, 0xFF	; 255
     18e:	d8 e0       	ldi	r29, 0x08	; 8
     190:	de bf       	out	0x3e, r29	; 62
     192:	cd bf       	out	0x3d, r28	; 61

00000194 <__do_copy_data>:
     194:	11 e0       	ldi	r17, 0x01	; 1
     196:	a0 e0       	ldi	r26, 0x00	; 0
     198:	b1 e0       	ldi	r27, 0x01	; 1
     19a:	e2 e9       	ldi	r30, 0x92	; 146
     19c:	f1 e1       	ldi	r31, 0x11	; 17
     19e:	02 c0       	rjmp	.+4      	; 0x1a4 <__do_copy_data+0x10>
     1a0:	05 90       	lpm	r0, Z+
     1a2:	0d 92       	st	X+, r0
     1a4:	a8 30       	cpi	r26, 0x08	; 8
     1a6:	b1 07       	cpc	r27, r17
     1a8:	d9 f7       	brne	.-10     	; 0x1a0 <__do_copy_data+0xc>

000001aa <__do_clear_bss>:
     1aa:	21 e0       	ldi	r18, 0x01	; 1
     1ac:	a8 e0       	ldi	r26, 0x08	; 8
     1ae:	b1 e0       	ldi	r27, 0x01	; 1
     1b0:	01 c0       	rjmp	.+2      	; 0x1b4 <.do_clear_bss_start>

000001b2 <.do_clear_bss_loop>:
     1b2:	1d 92       	st	X+, r1

000001b4 <.do_clear_bss_start>:
     1b4:	a5 36       	cpi	r26, 0x65	; 101
     1b6:	b2 07       	cpc	r27, r18
     1b8:	e1 f7       	brne	.-8      	; 0x1b2 <.do_clear_bss_loop>
     1ba:	0e 94 33 03 	call	0x666	; 0x666 <main>
     1be:	0c 94 c7 08 	jmp	0x118e	; 0x118e <_exit>

000001c2 <__bad_interrupt>:
     1c2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001c6 <BlinkCfg>:
     1c6:	ef 92       	push	r14
     1c8:	ff 92       	push	r15
     1ca:	0f 93       	push	r16
     1cc:	1f 93       	push	r17
     1ce:	cf 93       	push	r28
     1d0:	df 93       	push	r29
     1d2:	fc 01       	movw	r30, r24
     1d4:	80 81       	ld	r24, Z
     1d6:	c3 81       	ldd	r28, Z+3	; 0x03
     1d8:	d4 81       	ldd	r29, Z+4	; 0x04
     1da:	28 81       	ld	r18, Y
     1dc:	41 e0       	ldi	r20, 0x01	; 1
     1de:	50 e0       	ldi	r21, 0x00	; 0
     1e0:	60 e0       	ldi	r22, 0x00	; 0
     1e2:	70 e0       	ldi	r23, 0x00	; 0
     1e4:	7a 01       	movw	r14, r20
     1e6:	8b 01       	movw	r16, r22
     1e8:	04 c0       	rjmp	.+8      	; 0x1f2 <BlinkCfg+0x2c>
     1ea:	ee 0c       	add	r14, r14
     1ec:	ff 1c       	adc	r15, r15
     1ee:	00 1f       	adc	r16, r16
     1f0:	11 1f       	adc	r17, r17
     1f2:	8a 95       	dec	r24
     1f4:	d2 f7       	brpl	.-12     	; 0x1ea <BlinkCfg+0x24>
     1f6:	d8 01       	movw	r26, r16
     1f8:	c7 01       	movw	r24, r14
     1fa:	82 2b       	or	r24, r18
     1fc:	88 83       	st	Y, r24
     1fe:	85 81       	ldd	r24, Z+5	; 0x05
     200:	90 81       	ld	r25, Z
     202:	01 80       	ldd	r0, Z+1	; 0x01
     204:	f2 81       	ldd	r31, Z+2	; 0x02
     206:	e0 2d       	mov	r30, r0
     208:	81 30       	cpi	r24, 0x01	; 1
     20a:	a9 f0       	breq	.+42     	; 0x236 <BlinkCfg+0x70>
     20c:	80 81       	ld	r24, Z
     20e:	04 c0       	rjmp	.+8      	; 0x218 <BlinkCfg+0x52>
     210:	44 0f       	add	r20, r20
     212:	55 1f       	adc	r21, r21
     214:	66 1f       	adc	r22, r22
     216:	77 1f       	adc	r23, r23
     218:	9a 95       	dec	r25
     21a:	d2 f7       	brpl	.-12     	; 0x210 <BlinkCfg+0x4a>
     21c:	40 95       	com	r20
     21e:	50 95       	com	r21
     220:	60 95       	com	r22
     222:	70 95       	com	r23
     224:	48 23       	and	r20, r24
     226:	40 83       	st	Z, r20
     228:	df 91       	pop	r29
     22a:	cf 91       	pop	r28
     22c:	1f 91       	pop	r17
     22e:	0f 91       	pop	r16
     230:	ff 90       	pop	r15
     232:	ef 90       	pop	r14
     234:	08 95       	ret
     236:	80 81       	ld	r24, Z
     238:	04 c0       	rjmp	.+8      	; 0x242 <BlinkCfg+0x7c>
     23a:	44 0f       	add	r20, r20
     23c:	55 1f       	adc	r21, r21
     23e:	66 1f       	adc	r22, r22
     240:	77 1f       	adc	r23, r23
     242:	9a 95       	dec	r25
     244:	d2 f7       	brpl	.-12     	; 0x23a <BlinkCfg+0x74>
     246:	48 2b       	or	r20, r24
     248:	40 83       	st	Z, r20
     24a:	df 91       	pop	r29
     24c:	cf 91       	pop	r28
     24e:	1f 91       	pop	r17
     250:	0f 91       	pop	r16
     252:	ff 90       	pop	r15
     254:	ef 90       	pop	r14
     256:	08 95       	ret

00000258 <IOCfg>:
 ***KONFIGURACIJSKA FUNKCIJA****
 *******************************/

Blink leds[LED_NUM];

void IOCfg(){
     258:	ef 92       	push	r14
     25a:	ff 92       	push	r15
     25c:	0f 93       	push	r16
     25e:	1f 93       	push	r17
     260:	cf 93       	push	r28
     262:	df 93       	push	r29
     264:	cd b7       	in	r28, 0x3d	; 61
     266:	de b7       	in	r29, 0x3e	; 62
     268:	63 97       	sbiw	r28, 0x13	; 19
     26a:	0f b6       	in	r0, 0x3f	; 63
     26c:	f8 94       	cli
     26e:	de bf       	out	0x3e, r29	; 62
     270:	0f be       	out	0x3f, r0	; 63
     272:	cd bf       	out	0x3d, r28	; 61
	leds[0].pin = LED0;
     274:	a7 e0       	ldi	r26, 0x07	; 7
     276:	a0 93 19 01 	sts	0x0119, r26	; 0x800119 <leds>
	leds[0].port=&LED0_PORT;
     27a:	45 e2       	ldi	r20, 0x25	; 37
     27c:	50 e0       	ldi	r21, 0x00	; 0
     27e:	50 93 1b 01 	sts	0x011B, r21	; 0x80011b <leds+0x2>
     282:	40 93 1a 01 	sts	0x011A, r20	; 0x80011a <leds+0x1>
	leds[0].dir_port=&LED0_DIR_PORT;
     286:	24 e2       	ldi	r18, 0x24	; 36
     288:	30 e0       	ldi	r19, 0x00	; 0
     28a:	30 93 1d 01 	sts	0x011D, r19	; 0x80011d <leds+0x4>
     28e:	20 93 1c 01 	sts	0x011C, r18	; 0x80011c <leds+0x3>
	leds[0].value=1;
     292:	81 e0       	ldi	r24, 0x01	; 1
     294:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <leds+0x5>

	leds[1].pin = LED1;
     298:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <leds+0x9>
	leds[1].port=&LED1_PORT;
     29c:	eb e2       	ldi	r30, 0x2B	; 43
     29e:	f0 e0       	ldi	r31, 0x00	; 0
     2a0:	f0 93 24 01 	sts	0x0124, r31	; 0x800124 <leds+0xb>
     2a4:	e0 93 23 01 	sts	0x0123, r30	; 0x800123 <leds+0xa>
	leds[1].dir_port=&LED1_DIR_PORT;
     2a8:	6a e2       	ldi	r22, 0x2A	; 42
     2aa:	70 e0       	ldi	r23, 0x00	; 0
     2ac:	70 93 26 01 	sts	0x0126, r23	; 0x800126 <leds+0xd>
     2b0:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <leds+0xc>
	leds[1].value=1;
     2b4:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <leds+0xe>

	leds[2].pin = LED2;
     2b8:	92 e0       	ldi	r25, 0x02	; 2
     2ba:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <leds+0x12>
	leds[2].port=&LED2_PORT;
     2be:	b8 e2       	ldi	r27, 0x28	; 40
     2c0:	eb 2e       	mov	r14, r27
     2c2:	f1 2c       	mov	r15, r1
     2c4:	f0 92 2d 01 	sts	0x012D, r15	; 0x80012d <leds+0x14>
     2c8:	e0 92 2c 01 	sts	0x012C, r14	; 0x80012c <leds+0x13>
	leds[2].dir_port=&LED2_DIR_PORT;
     2cc:	07 e2       	ldi	r16, 0x27	; 39
     2ce:	10 e0       	ldi	r17, 0x00	; 0
     2d0:	10 93 2f 01 	sts	0x012F, r17	; 0x80012f <leds+0x16>
     2d4:	00 93 2e 01 	sts	0x012E, r16	; 0x80012e <leds+0x15>
	leds[2].value=1;
     2d8:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <leds+0x17>


	leds[3].pin = LED3;
     2dc:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <leds+0x1b>
	leds[3].port=&LED3_PORT;
     2e0:	f0 92 36 01 	sts	0x0136, r15	; 0x800136 <leds+0x1d>
     2e4:	e0 92 35 01 	sts	0x0135, r14	; 0x800135 <leds+0x1c>
	leds[3].dir_port=&LED3_DIR_PORT;
     2e8:	10 93 38 01 	sts	0x0138, r17	; 0x800138 <leds+0x1f>
     2ec:	00 93 37 01 	sts	0x0137, r16	; 0x800137 <leds+0x1e>
	leds[3].value=1;
     2f0:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <leds+0x20>

	leds[4].pin = LED4;
     2f4:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <leds+0x24>
	leds[4].port=&LED4_PORT;
     2f8:	50 93 3f 01 	sts	0x013F, r21	; 0x80013f <leds+0x26>
     2fc:	40 93 3e 01 	sts	0x013E, r20	; 0x80013e <leds+0x25>
	leds[4].dir_port=&LED4_DIR_PORT;
     300:	30 93 41 01 	sts	0x0141, r19	; 0x800141 <leds+0x28>
     304:	20 93 40 01 	sts	0x0140, r18	; 0x800140 <leds+0x27>
	leds[4].value=1;
     308:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <leds+0x29>

	leds[5].pin = LED5;
     30c:	a0 93 46 01 	sts	0x0146, r26	; 0x800146 <leds+0x2d>
	leds[5].port=&LED5_PORT;
     310:	f0 93 48 01 	sts	0x0148, r31	; 0x800148 <leds+0x2f>
     314:	e0 93 47 01 	sts	0x0147, r30	; 0x800147 <leds+0x2e>
	leds[5].dir_port=&LED5_DIR_PORT;
     318:	70 93 4a 01 	sts	0x014A, r23	; 0x80014a <leds+0x31>
     31c:	60 93 49 01 	sts	0x0149, r22	; 0x800149 <leds+0x30>
	leds[5].value=1;
     320:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <leds+0x32>

	leds[6].pin = LED6;
     324:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <leds+0x36>
	leds[6].port=&LED6_PORT;
     328:	50 93 51 01 	sts	0x0151, r21	; 0x800151 <leds+0x38>
     32c:	40 93 50 01 	sts	0x0150, r20	; 0x800150 <leds+0x37>
	leds[6].dir_port=&LED6_DIR_PORT;
     330:	30 93 53 01 	sts	0x0153, r19	; 0x800153 <leds+0x3a>
     334:	20 93 52 01 	sts	0x0152, r18	; 0x800152 <leds+0x39>
	leds[6].value=1;
     338:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <leds+0x3b>

	leds[7].pin = LED7;
     33c:	a6 e0       	ldi	r26, 0x06	; 6
     33e:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <leds+0x3f>
	leds[7].port=&LED7_PORT;
     342:	50 93 5a 01 	sts	0x015A, r21	; 0x80015a <leds+0x41>
     346:	40 93 59 01 	sts	0x0159, r20	; 0x800159 <leds+0x40>
	leds[7].dir_port=&LED7_DIR_PORT;
     34a:	30 93 5c 01 	sts	0x015C, r19	; 0x80015c <leds+0x43>
     34e:	20 93 5b 01 	sts	0x015B, r18	; 0x80015b <leds+0x42>
	leds[7].value=1;
     352:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <leds+0x44>

	Blink audio;
	audio.pin=AUDIO;
     356:	a9 83       	std	Y+1, r26	; 0x01
	audio.port=&AUDIO_PORT;
     358:	fb 83       	std	Y+3, r31	; 0x03
     35a:	ea 83       	std	Y+2, r30	; 0x02
	audio.dir_port=&AUDIO_DIR_PORT;
     35c:	7d 83       	std	Y+5, r23	; 0x05
     35e:	6c 83       	std	Y+4, r22	; 0x04
	audio.value=0;
     360:	1e 82       	std	Y+6, r1	; 0x06

	Input button1;
	button1.pin=BTN;
     362:	9f 87       	std	Y+15, r25	; 0x0f
	button1.port=&BTN_PORT;
	button1.dir_port=&BTN_DIR_PORT;

	Input ir_rec;
	ir_rec.pin=IR_REC;
     364:	83 e0       	ldi	r24, 0x03	; 3
     366:	8a 87       	std	Y+10, r24	; 0x0a
     368:	09 e1       	ldi	r16, 0x19	; 25
     36a:	11 e0       	ldi	r17, 0x01	; 1
	ir_rec.port=&IR_REC_PORT;
	ir_rec.dir_port=&IR_REC_DIR_PORT;

	for (uint8_t i=0; i<LED_NUM;i++){
		BlinkCfg(&leds[i]);
     36c:	c8 01       	movw	r24, r16
     36e:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <BlinkCfg>
     372:	07 5f       	subi	r16, 0xF7	; 247
     374:	1f 4f       	sbci	r17, 0xFF	; 255
	Input ir_rec;
	ir_rec.pin=IR_REC;
	ir_rec.port=&IR_REC_PORT;
	ir_rec.dir_port=&IR_REC_DIR_PORT;

	for (uint8_t i=0; i<LED_NUM;i++){
     376:	81 e0       	ldi	r24, 0x01	; 1
     378:	01 36       	cpi	r16, 0x61	; 97
     37a:	18 07       	cpc	r17, r24
     37c:	b9 f7       	brne	.-18     	; 0x36c <IOCfg+0x114>
		BlinkCfg(&leds[i]);
	}

	BlinkCfg(&audio);
     37e:	ce 01       	movw	r24, r28
     380:	01 96       	adiw	r24, 0x01	; 1
     382:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <BlinkCfg>
		CLEARBIT(*(ledica->port), ledica->pin);
	}
}

void InputCfg(Input *button){
	CLEARBIT(*(button->dir_port), button->pin);
     386:	3f 85       	ldd	r19, Y+15	; 0x0f
     388:	2a b1       	in	r18, 0x0a	; 10
     38a:	81 e0       	ldi	r24, 0x01	; 1
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	a0 e0       	ldi	r26, 0x00	; 0
     390:	b0 e0       	ldi	r27, 0x00	; 0
     392:	ac 01       	movw	r20, r24
     394:	bd 01       	movw	r22, r26
     396:	04 c0       	rjmp	.+8      	; 0x3a0 <IOCfg+0x148>
     398:	44 0f       	add	r20, r20
     39a:	55 1f       	adc	r21, r21
     39c:	66 1f       	adc	r22, r22
     39e:	77 1f       	adc	r23, r23
     3a0:	3a 95       	dec	r19
     3a2:	d2 f7       	brpl	.-12     	; 0x398 <IOCfg+0x140>
     3a4:	40 95       	com	r20
     3a6:	50 95       	com	r21
     3a8:	60 95       	com	r22
     3aa:	70 95       	com	r23
     3ac:	42 23       	and	r20, r18
     3ae:	4a b9       	out	0x0a, r20	; 10
	SETBIT(*(button->port), button->pin);
     3b0:	3f 85       	ldd	r19, Y+15	; 0x0f
     3b2:	2b b1       	in	r18, 0x0b	; 11
     3b4:	ac 01       	movw	r20, r24
     3b6:	bd 01       	movw	r22, r26
     3b8:	04 c0       	rjmp	.+8      	; 0x3c2 <IOCfg+0x16a>
     3ba:	44 0f       	add	r20, r20
     3bc:	55 1f       	adc	r21, r21
     3be:	66 1f       	adc	r22, r22
     3c0:	77 1f       	adc	r23, r23
     3c2:	3a 95       	dec	r19
     3c4:	d2 f7       	brpl	.-12     	; 0x3ba <IOCfg+0x162>
     3c6:	42 2b       	or	r20, r18
     3c8:	4b b9       	out	0x0b, r20	; 11
		CLEARBIT(*(ledica->port), ledica->pin);
	}
}

void InputCfg(Input *button){
	CLEARBIT(*(button->dir_port), button->pin);
     3ca:	3a 85       	ldd	r19, Y+10	; 0x0a
     3cc:	2a b1       	in	r18, 0x0a	; 10
     3ce:	ac 01       	movw	r20, r24
     3d0:	bd 01       	movw	r22, r26
     3d2:	04 c0       	rjmp	.+8      	; 0x3dc <IOCfg+0x184>
     3d4:	44 0f       	add	r20, r20
     3d6:	55 1f       	adc	r21, r21
     3d8:	66 1f       	adc	r22, r22
     3da:	77 1f       	adc	r23, r23
     3dc:	3a 95       	dec	r19
     3de:	d2 f7       	brpl	.-12     	; 0x3d4 <IOCfg+0x17c>
     3e0:	40 95       	com	r20
     3e2:	50 95       	com	r21
     3e4:	60 95       	com	r22
     3e6:	70 95       	com	r23
     3e8:	42 23       	and	r20, r18
     3ea:	4a b9       	out	0x0a, r20	; 10
	SETBIT(*(button->port), button->pin);
     3ec:	3a 85       	ldd	r19, Y+10	; 0x0a
     3ee:	2b b1       	in	r18, 0x0b	; 11
     3f0:	04 c0       	rjmp	.+8      	; 0x3fa <IOCfg+0x1a2>
     3f2:	88 0f       	add	r24, r24
     3f4:	99 1f       	adc	r25, r25
     3f6:	aa 1f       	adc	r26, r26
     3f8:	bb 1f       	adc	r27, r27
     3fa:	3a 95       	dec	r19
     3fc:	d2 f7       	brpl	.-12     	; 0x3f2 <IOCfg+0x19a>
     3fe:	82 2b       	or	r24, r18
     400:	8b b9       	out	0x0b, r24	; 11
	BlinkCfg(&audio);

	InputCfg(&button1);
	InputCfg(&ir_rec);

};
     402:	63 96       	adiw	r28, 0x13	; 19
     404:	0f b6       	in	r0, 0x3f	; 63
     406:	f8 94       	cli
     408:	de bf       	out	0x3e, r29	; 62
     40a:	0f be       	out	0x3f, r0	; 63
     40c:	cd bf       	out	0x3d, r28	; 61
     40e:	df 91       	pop	r29
     410:	cf 91       	pop	r28
     412:	1f 91       	pop	r17
     414:	0f 91       	pop	r16
     416:	ff 90       	pop	r15
     418:	ef 90       	pop	r14
     41a:	08 95       	ret

0000041c <SetValue>:
	SETBIT(*(ledica->dir_port), ledica->pin);
	if(ledica->value==1)SETBIT(*(ledica->port), ledica->pin);
	else CLEARBIT(*(ledica->port), ledica->pin);
}

void SetValue(Blink *ledica){
     41c:	fc 01       	movw	r30, r24
	if(ledica->value==1){
     41e:	85 81       	ldd	r24, Z+5	; 0x05
		SETBIT(*(ledica->port), ledica->pin);
     420:	30 81       	ld	r19, Z
     422:	01 80       	ldd	r0, Z+1	; 0x01
     424:	f2 81       	ldd	r31, Z+2	; 0x02
     426:	e0 2d       	mov	r30, r0
     428:	20 81       	ld	r18, Z
	if(ledica->value==1)SETBIT(*(ledica->port), ledica->pin);
	else CLEARBIT(*(ledica->port), ledica->pin);
}

void SetValue(Blink *ledica){
	if(ledica->value==1){
     42a:	81 30       	cpi	r24, 0x01	; 1
     42c:	91 f0       	breq	.+36     	; 0x452 <SetValue+0x36>
		SETBIT(*(ledica->port), ledica->pin);
	}
	else {
		CLEARBIT(*(ledica->port), ledica->pin);
     42e:	81 e0       	ldi	r24, 0x01	; 1
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	a0 e0       	ldi	r26, 0x00	; 0
     434:	b0 e0       	ldi	r27, 0x00	; 0
     436:	04 c0       	rjmp	.+8      	; 0x440 <SetValue+0x24>
     438:	88 0f       	add	r24, r24
     43a:	99 1f       	adc	r25, r25
     43c:	aa 1f       	adc	r26, r26
     43e:	bb 1f       	adc	r27, r27
     440:	3a 95       	dec	r19
     442:	d2 f7       	brpl	.-12     	; 0x438 <SetValue+0x1c>
     444:	80 95       	com	r24
     446:	90 95       	com	r25
     448:	a0 95       	com	r26
     44a:	b0 95       	com	r27
     44c:	82 23       	and	r24, r18
     44e:	80 83       	st	Z, r24
     450:	08 95       	ret
	else CLEARBIT(*(ledica->port), ledica->pin);
}

void SetValue(Blink *ledica){
	if(ledica->value==1){
		SETBIT(*(ledica->port), ledica->pin);
     452:	81 e0       	ldi	r24, 0x01	; 1
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	a0 e0       	ldi	r26, 0x00	; 0
     458:	b0 e0       	ldi	r27, 0x00	; 0
     45a:	04 c0       	rjmp	.+8      	; 0x464 <SetValue+0x48>
     45c:	88 0f       	add	r24, r24
     45e:	99 1f       	adc	r25, r25
     460:	aa 1f       	adc	r26, r26
     462:	bb 1f       	adc	r27, r27
     464:	3a 95       	dec	r19
     466:	d2 f7       	brpl	.-12     	; 0x45c <SetValue+0x40>
     468:	82 2b       	or	r24, r18
     46a:	80 83       	st	Z, r24
     46c:	08 95       	ret

0000046e <InputCfg>:
	else {
		CLEARBIT(*(ledica->port), ledica->pin);
	}
}

void InputCfg(Input *button){
     46e:	0f 93       	push	r16
     470:	1f 93       	push	r17
     472:	fc 01       	movw	r30, r24
	CLEARBIT(*(button->dir_port), button->pin);
     474:	90 81       	ld	r25, Z
     476:	a3 81       	ldd	r26, Z+3	; 0x03
     478:	b4 81       	ldd	r27, Z+4	; 0x04
     47a:	8c 91       	ld	r24, X
     47c:	41 e0       	ldi	r20, 0x01	; 1
     47e:	50 e0       	ldi	r21, 0x00	; 0
     480:	60 e0       	ldi	r22, 0x00	; 0
     482:	70 e0       	ldi	r23, 0x00	; 0
     484:	8a 01       	movw	r16, r20
     486:	9b 01       	movw	r18, r22
     488:	04 c0       	rjmp	.+8      	; 0x492 <InputCfg+0x24>
     48a:	00 0f       	add	r16, r16
     48c:	11 1f       	adc	r17, r17
     48e:	22 1f       	adc	r18, r18
     490:	33 1f       	adc	r19, r19
     492:	9a 95       	dec	r25
     494:	d2 f7       	brpl	.-12     	; 0x48a <InputCfg+0x1c>
     496:	00 95       	com	r16
     498:	10 95       	com	r17
     49a:	20 95       	com	r18
     49c:	30 95       	com	r19
     49e:	08 23       	and	r16, r24
     4a0:	0c 93       	st	X, r16
	SETBIT(*(button->port), button->pin);
     4a2:	90 81       	ld	r25, Z
     4a4:	01 80       	ldd	r0, Z+1	; 0x01
     4a6:	f2 81       	ldd	r31, Z+2	; 0x02
     4a8:	e0 2d       	mov	r30, r0
     4aa:	80 81       	ld	r24, Z
     4ac:	04 c0       	rjmp	.+8      	; 0x4b6 <InputCfg+0x48>
     4ae:	44 0f       	add	r20, r20
     4b0:	55 1f       	adc	r21, r21
     4b2:	66 1f       	adc	r22, r22
     4b4:	77 1f       	adc	r23, r23
     4b6:	9a 95       	dec	r25
     4b8:	d2 f7       	brpl	.-12     	; 0x4ae <InputCfg+0x40>
     4ba:	48 2b       	or	r20, r24
     4bc:	40 83       	st	Z, r20
}
     4be:	1f 91       	pop	r17
     4c0:	0f 91       	pop	r16
     4c2:	08 95       	ret

000004c4 <pcint_en>:
 ************FUNKCIJE***********
 *******************************/

//Enable PCINTy interrupts
//x => PCINTx interrupt
void pcint_en(uint8_t x){
     4c4:	ef 92       	push	r14
     4c6:	ff 92       	push	r15
     4c8:	0f 93       	push	r16
     4ca:	1f 93       	push	r17
	if(x<8){
     4cc:	88 30       	cpi	r24, 0x08	; 8
     4ce:	08 f4       	brcc	.+2      	; 0x4d2 <pcint_en+0xe>
     4d0:	46 c0       	rjmp	.+140    	; 0x55e <pcint_en+0x9a>
		SETBIT(PCICR, PCIE0);
		SETBIT(PCMSK0, x);
	}
	else if(x>=8 && x<15 ){
     4d2:	98 ef       	ldi	r25, 0xF8	; 248
     4d4:	98 0f       	add	r25, r24
     4d6:	97 30       	cpi	r25, 0x07	; 7
     4d8:	18 f1       	brcs	.+70     	; 0x520 <pcint_en+0x5c>
		SETBIT(PCICR, PCIE1);
		SETBIT(PCMSK1, (x%8));
	}
	else if(x>=16 && x<24){
     4da:	90 ef       	ldi	r25, 0xF0	; 240
     4dc:	98 0f       	add	r25, r24
     4de:	98 30       	cpi	r25, 0x08	; 8
     4e0:	d0 f4       	brcc	.+52     	; 0x516 <pcint_en+0x52>
		SETBIT(PCICR, PCIE2);
     4e2:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
     4e6:	94 60       	ori	r25, 0x04	; 4
     4e8:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
		SETBIT(PCMSK2, (x%16));
     4ec:	20 91 6d 00 	lds	r18, 0x006D	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
     4f0:	8f 70       	andi	r24, 0x0F	; 15
     4f2:	41 e0       	ldi	r20, 0x01	; 1
     4f4:	50 e0       	ldi	r21, 0x00	; 0
     4f6:	60 e0       	ldi	r22, 0x00	; 0
     4f8:	70 e0       	ldi	r23, 0x00	; 0
     4fa:	7a 01       	movw	r14, r20
     4fc:	8b 01       	movw	r16, r22
     4fe:	04 c0       	rjmp	.+8      	; 0x508 <pcint_en+0x44>
     500:	ee 0c       	add	r14, r14
     502:	ff 1c       	adc	r15, r15
     504:	00 1f       	adc	r16, r16
     506:	11 1f       	adc	r17, r17
     508:	8a 95       	dec	r24
     50a:	d2 f7       	brpl	.-12     	; 0x500 <pcint_en+0x3c>
     50c:	d8 01       	movw	r26, r16
     50e:	c7 01       	movw	r24, r14
     510:	82 2b       	or	r24, r18
     512:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
	}
}
     516:	1f 91       	pop	r17
     518:	0f 91       	pop	r16
     51a:	ff 90       	pop	r15
     51c:	ef 90       	pop	r14
     51e:	08 95       	ret
	if(x<8){
		SETBIT(PCICR, PCIE0);
		SETBIT(PCMSK0, x);
	}
	else if(x>=8 && x<15 ){
		SETBIT(PCICR, PCIE1);
     520:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
     524:	92 60       	ori	r25, 0x02	; 2
     526:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
		SETBIT(PCMSK1, (x%8));
     52a:	20 91 6c 00 	lds	r18, 0x006C	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
     52e:	87 70       	andi	r24, 0x07	; 7
     530:	41 e0       	ldi	r20, 0x01	; 1
     532:	50 e0       	ldi	r21, 0x00	; 0
     534:	60 e0       	ldi	r22, 0x00	; 0
     536:	70 e0       	ldi	r23, 0x00	; 0
     538:	7a 01       	movw	r14, r20
     53a:	8b 01       	movw	r16, r22
     53c:	04 c0       	rjmp	.+8      	; 0x546 <pcint_en+0x82>
     53e:	ee 0c       	add	r14, r14
     540:	ff 1c       	adc	r15, r15
     542:	00 1f       	adc	r16, r16
     544:	11 1f       	adc	r17, r17
     546:	8a 95       	dec	r24
     548:	d2 f7       	brpl	.-12     	; 0x53e <pcint_en+0x7a>
     54a:	d8 01       	movw	r26, r16
     54c:	c7 01       	movw	r24, r14
     54e:	82 2b       	or	r24, r18
     550:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
	}
	else if(x>=16 && x<24){
		SETBIT(PCICR, PCIE2);
		SETBIT(PCMSK2, (x%16));
	}
}
     554:	1f 91       	pop	r17
     556:	0f 91       	pop	r16
     558:	ff 90       	pop	r15
     55a:	ef 90       	pop	r14
     55c:	08 95       	ret

//Enable PCINTy interrupts
//x => PCINTx interrupt
void pcint_en(uint8_t x){
	if(x<8){
		SETBIT(PCICR, PCIE0);
     55e:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
     562:	91 60       	ori	r25, 0x01	; 1
     564:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
		SETBIT(PCMSK0, x);
     568:	20 91 6b 00 	lds	r18, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
     56c:	41 e0       	ldi	r20, 0x01	; 1
     56e:	50 e0       	ldi	r21, 0x00	; 0
     570:	60 e0       	ldi	r22, 0x00	; 0
     572:	70 e0       	ldi	r23, 0x00	; 0
     574:	7a 01       	movw	r14, r20
     576:	8b 01       	movw	r16, r22
     578:	04 c0       	rjmp	.+8      	; 0x582 <pcint_en+0xbe>
     57a:	ee 0c       	add	r14, r14
     57c:	ff 1c       	adc	r15, r15
     57e:	00 1f       	adc	r16, r16
     580:	11 1f       	adc	r17, r17
     582:	8a 95       	dec	r24
     584:	d2 f7       	brpl	.-12     	; 0x57a <pcint_en+0xb6>
     586:	d8 01       	movw	r26, r16
     588:	c7 01       	movw	r24, r14
     58a:	82 2b       	or	r24, r18
     58c:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
	}
	else if(x>=16 && x<24){
		SETBIT(PCICR, PCIE2);
		SETBIT(PCMSK2, (x%16));
	}
}
     590:	1f 91       	pop	r17
     592:	0f 91       	pop	r16
     594:	ff 90       	pop	r15
     596:	ef 90       	pop	r14
     598:	08 95       	ret

0000059a <IntCfg>:
 ***KONFIGURACIJSKE FUNKCIJE****

 *******************************/
void IntCfg(){
	//Vključitev PCINT8, PCINT23
	pcint_en(18);
     59a:	82 e1       	ldi	r24, 0x12	; 18
     59c:	0e 94 62 02 	call	0x4c4	; 0x4c4 <pcint_en>
	pcint_en(19);
     5a0:	83 e1       	ldi	r24, 0x13	; 19
     5a2:	0c 94 62 02 	jmp	0x4c4	; 0x4c4 <pcint_en>

000005a6 <pcint_dis>:
	}
}

//Disable PCINTy interrupts
//x => PCINTx interrupt
void pcint_dis(uint32_t x){
     5a6:	0f 93       	push	r16
     5a8:	1f 93       	push	r17
	if(x<8){
     5aa:	68 30       	cpi	r22, 0x08	; 8
     5ac:	71 05       	cpc	r23, r1
     5ae:	81 05       	cpc	r24, r1
     5b0:	91 05       	cpc	r25, r1
     5b2:	08 f4       	brcc	.+2      	; 0x5b6 <pcint_dis+0x10>
     5b4:	42 c0       	rjmp	.+132    	; 0x63a <pcint_dis+0x94>
		CLEARBIT(PCMSK0, x);
	}
	else if(x>=8 && x<15 ){
     5b6:	8b 01       	movw	r16, r22
     5b8:	9c 01       	movw	r18, r24
     5ba:	08 50       	subi	r16, 0x08	; 8
     5bc:	11 09       	sbc	r17, r1
     5be:	21 09       	sbc	r18, r1
     5c0:	31 09       	sbc	r19, r1
     5c2:	07 30       	cpi	r16, 0x07	; 7
     5c4:	11 05       	cpc	r17, r1
     5c6:	21 05       	cpc	r18, r1
     5c8:	31 05       	cpc	r19, r1
     5ca:	08 f1       	brcs	.+66     	; 0x60e <pcint_dis+0x68>
		CLEARBIT(PCMSK1, (x%8));
	}
	else if(x>=16 && x<23){
     5cc:	8b 01       	movw	r16, r22
     5ce:	9c 01       	movw	r18, r24
     5d0:	00 51       	subi	r16, 0x10	; 16
     5d2:	11 09       	sbc	r17, r1
     5d4:	21 09       	sbc	r18, r1
     5d6:	31 09       	sbc	r19, r1
     5d8:	07 30       	cpi	r16, 0x07	; 7
     5da:	11 05       	cpc	r17, r1
     5dc:	21 05       	cpc	r18, r1
     5de:	31 05       	cpc	r19, r1
     5e0:	98 f4       	brcc	.+38     	; 0x608 <pcint_dis+0x62>
		CLEARBIT(PCMSK2, (x%16));
     5e2:	20 91 6d 00 	lds	r18, 0x006D	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
     5e6:	6f 70       	andi	r22, 0x0F	; 15
     5e8:	77 27       	eor	r23, r23
     5ea:	81 e0       	ldi	r24, 0x01	; 1
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	a0 e0       	ldi	r26, 0x00	; 0
     5f0:	b0 e0       	ldi	r27, 0x00	; 0
     5f2:	04 c0       	rjmp	.+8      	; 0x5fc <pcint_dis+0x56>
     5f4:	88 0f       	add	r24, r24
     5f6:	99 1f       	adc	r25, r25
     5f8:	aa 1f       	adc	r26, r26
     5fa:	bb 1f       	adc	r27, r27
     5fc:	6a 95       	dec	r22
     5fe:	d2 f7       	brpl	.-12     	; 0x5f4 <pcint_dis+0x4e>
     600:	80 95       	com	r24
     602:	82 23       	and	r24, r18
     604:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
	}
}
     608:	1f 91       	pop	r17
     60a:	0f 91       	pop	r16
     60c:	08 95       	ret
void pcint_dis(uint32_t x){
	if(x<8){
		CLEARBIT(PCMSK0, x);
	}
	else if(x>=8 && x<15 ){
		CLEARBIT(PCMSK1, (x%8));
     60e:	20 91 6c 00 	lds	r18, 0x006C	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
     612:	67 70       	andi	r22, 0x07	; 7
     614:	77 27       	eor	r23, r23
     616:	81 e0       	ldi	r24, 0x01	; 1
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	a0 e0       	ldi	r26, 0x00	; 0
     61c:	b0 e0       	ldi	r27, 0x00	; 0
     61e:	04 c0       	rjmp	.+8      	; 0x628 <pcint_dis+0x82>
     620:	88 0f       	add	r24, r24
     622:	99 1f       	adc	r25, r25
     624:	aa 1f       	adc	r26, r26
     626:	bb 1f       	adc	r27, r27
     628:	6a 95       	dec	r22
     62a:	d2 f7       	brpl	.-12     	; 0x620 <pcint_dis+0x7a>
     62c:	80 95       	com	r24
     62e:	82 23       	and	r24, r18
     630:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
	}
	else if(x>=16 && x<23){
		CLEARBIT(PCMSK2, (x%16));
	}
}
     634:	1f 91       	pop	r17
     636:	0f 91       	pop	r16
     638:	08 95       	ret

//Disable PCINTy interrupts
//x => PCINTx interrupt
void pcint_dis(uint32_t x){
	if(x<8){
		CLEARBIT(PCMSK0, x);
     63a:	40 91 6b 00 	lds	r20, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
     63e:	01 e0       	ldi	r16, 0x01	; 1
     640:	10 e0       	ldi	r17, 0x00	; 0
     642:	20 e0       	ldi	r18, 0x00	; 0
     644:	30 e0       	ldi	r19, 0x00	; 0
     646:	d9 01       	movw	r26, r18
     648:	c8 01       	movw	r24, r16
     64a:	04 c0       	rjmp	.+8      	; 0x654 <pcint_dis+0xae>
     64c:	88 0f       	add	r24, r24
     64e:	99 1f       	adc	r25, r25
     650:	aa 1f       	adc	r26, r26
     652:	bb 1f       	adc	r27, r27
     654:	6a 95       	dec	r22
     656:	d2 f7       	brpl	.-12     	; 0x64c <pcint_dis+0xa6>
     658:	80 95       	com	r24
     65a:	84 23       	and	r24, r20
     65c:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
		CLEARBIT(PCMSK1, (x%8));
	}
	else if(x>=16 && x<23){
		CLEARBIT(PCMSK2, (x%16));
	}
}
     660:	1f 91       	pop	r17
     662:	0f 91       	pop	r16
     664:	08 95       	ret

00000666 <main>:
light_machine my_light=SONG;
play_state music=STOP;
//circ_state


int main(){
     666:	cf 93       	push	r28
     668:	df 93       	push	r29
     66a:	00 d0       	rcall	.+0      	; 0x66c <main+0x6>
     66c:	00 d0       	rcall	.+0      	; 0x66e <main+0x8>
     66e:	00 d0       	rcall	.+0      	; 0x670 <main+0xa>
     670:	cd b7       	in	r28, 0x3d	; 61
     672:	de b7       	in	r29, 0x3e	; 62

	uint32_t tempo=40;
	   IOCfg();
     674:	0e 94 2c 01 	call	0x258	; 0x258 <IOCfg>
	 uint8_t song=0;
	   PWMCfg();
     678:	0e 94 78 07 	call	0xef0	; 0xef0 <PWMCfg>
	   uint8_t a=0;

	   IntCfg();
     67c:	0e 94 cd 02 	call	0x59a	; 0x59a <IntCfg>

//	   TIMER2_STOP;
//	   TCNT2=0;
	   PWM1_64_PRESC;
     680:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     684:	8b 7f       	andi	r24, 0xFB	; 251
     686:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     68a:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     68e:	83 60       	ori	r24, 0x03	; 3
     690:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	   PWM2_8_PRESC;
     694:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
     698:	8a 7f       	andi	r24, 0xFA	; 250
     69a:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
     69e:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
     6a2:	82 60       	ori	r24, 0x02	; 2
     6a4:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	   OCR2B=99;
     6a8:	83 e6       	ldi	r24, 0x63	; 99
     6aa:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
	   SETBIT(TIMSK1,TOIE1);
     6ae:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     6b2:	81 60       	ori	r24, 0x01	; 1
     6b4:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	   SETBIT(TIMSK2,OCIE2B);
     6b8:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     6bc:	84 60       	ori	r24, 0x04	; 4
     6be:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>

	   sei();
     6c2:	78 94       	sei
	   uint32_t i=0;
	   uint32_t tim=0;
     6c4:	41 2c       	mov	r4, r1
     6c6:	51 2c       	mov	r5, r1
     6c8:	32 01       	movw	r6, r4
	   OCR2B=99;
	   SETBIT(TIMSK1,TOIE1);
	   SETBIT(TIMSK2,OCIE2B);

	   sei();
	   uint32_t i=0;
     6ca:	c1 2c       	mov	r12, r1
     6cc:	d1 2c       	mov	r13, r1
     6ce:	76 01       	movw	r14, r12

	uint32_t tempo=40;
	   IOCfg();
	 uint8_t song=0;
	   PWMCfg();
	   uint8_t a=0;
     6d0:	91 2c       	mov	r9, r1

int main(){

	uint32_t tempo=40;
	   IOCfg();
	 uint8_t song=0;
     6d2:	a1 2c       	mov	r10, r1
//circ_state


int main(){

	uint32_t tempo=40;
     6d4:	88 e2       	ldi	r24, 0x28	; 40
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	a0 e0       	ldi	r26, 0x00	; 0
     6da:	b0 e0       	ldi	r27, 0x00	; 0
     6dc:	89 83       	std	Y+1, r24	; 0x01
     6de:	9a 83       	std	Y+2, r25	; 0x02
     6e0:	ab 83       	std	Y+3, r26	; 0x03
     6e2:	bc 83       	std	Y+4, r27	; 0x04

		switch(my_light){
			case SONG:
				for (uint8_t n=0; n<LED_NUM;n++){
					if(n==song)leds[n].value=0;
					else leds[n].value=1;
     6e4:	bb 24       	eor	r11, r11
     6e6:	b3 94       	inc	r11
				if(delay_cnt >= tim || song_flag==0){
					TIMER0_STOP;
					delay_cnt=0;
					TCNT2=0;
					i++;
					music=PAUSE;
     6e8:	b2 e0       	ldi	r27, 0x02	; 2
     6ea:	8b 2e       	mov	r8, r27
	   sei();
	   uint32_t i=0;
	   uint32_t tim=0;

	   for(;;){
		switch(my_state_machine){
     6ec:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <my_state_machine>
     6f0:	85 30       	cpi	r24, 0x05	; 5
     6f2:	09 f4       	brne	.+2      	; 0x6f6 <main+0x90>
     6f4:	41 c0       	rjmp	.+130    	; 0x778 <main+0x112>
				my_light=SONG;
				my_state_machine=IDLE;
				break;
		}

		switch(my_light){
     6f6:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <my_light>
     6fa:	82 30       	cpi	r24, 0x02	; 2
     6fc:	09 f4       	brne	.+2      	; 0x700 <main+0x9a>
     6fe:	05 c1       	rjmp	.+522    	; 0x90a <__stack+0xb>
     700:	08 f4       	brcc	.+2      	; 0x704 <main+0x9e>
     702:	c7 c1       	rjmp	.+910    	; 0xa92 <__stack+0x193>
     704:	84 30       	cpi	r24, 0x04	; 4
     706:	09 f4       	brne	.+2      	; 0x70a <main+0xa4>
     708:	6a c1       	rjmp	.+724    	; 0x9de <__stack+0xdf>
     70a:	08 f4       	brcc	.+2      	; 0x70e <main+0xa8>
     70c:	3b c1       	rjmp	.+630    	; 0x984 <__stack+0x85>
     70e:	85 30       	cpi	r24, 0x05	; 5
     710:	b1 f4       	brne	.+44     	; 0x73e <main+0xd8>
					count_ovr1=0;
				}
				break;

			case RAND:
				if(count_ovr2>500){
     712:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <count_ovr2>
     716:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <count_ovr2+0x1>
     71a:	a0 91 11 01 	lds	r26, 0x0111	; 0x800111 <count_ovr2+0x2>
     71e:	b0 91 12 01 	lds	r27, 0x0112	; 0x800112 <count_ovr2+0x3>
     722:	85 3f       	cpi	r24, 0xF5	; 245
     724:	91 40       	sbci	r25, 0x01	; 1
     726:	a1 05       	cpc	r26, r1
     728:	b1 05       	cpc	r27, r1
     72a:	08 f0       	brcs	.+2      	; 0x72e <main+0xc8>
     72c:	eb c1       	rjmp	.+982    	; 0xb04 <__stack+0x205>
				leds[rand()%8].value=rand()%2;
					for (uint8_t n=0; n<LED_NUM;n++){
						SetValue(&leds[n]);
					}
				}
				if(count_ovr1>10){
     72e:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <count_ovr1>
     732:	8b 30       	cpi	r24, 0x0B	; 11
     734:	20 f0       	brcs	.+8      	; 0x73e <main+0xd8>

					my_light=CLEAR;
     736:	b0 92 09 01 	sts	0x0109, r11	; 0x800109 <my_light>
					count_ovr1=0;
     73a:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <count_ovr1>
//			while(pgm_read_word(&kuza_pazi_song[i][2]) && song_flag==1){
//						playnote(pgm_read_word(&kuza_pazi_song[i][1]),pgm_read_word(&kuza_pazi_song[i][0]),pgm_read_word(&kuza_pazi_song[i][2])*tempo);
//						//playnote(A3_PRESC, A3, 4000);
//						i++;
//					}
		switch(music){
     73e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
     742:	81 30       	cpi	r24, 0x01	; 1
     744:	09 f4       	brne	.+2      	; 0x748 <main+0xe2>
     746:	61 c0       	rjmp	.+194    	; 0x80a <main+0x1a4>
     748:	81 30       	cpi	r24, 0x01	; 1
     74a:	08 f4       	brcc	.+2      	; 0x74e <main+0xe8>
     74c:	a3 c0       	rjmp	.+326    	; 0x894 <main+0x22e>
     74e:	82 30       	cpi	r24, 0x02	; 2
     750:	69 f6       	brne	.-102    	; 0x6ec <main+0x86>
				   song_flag=0;
				   music=STOP;
				}
				break;
			case PAUSE:
				if(delay_cnt >= 10){
     752:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <delay_cnt>
     756:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <delay_cnt+0x1>
     75a:	a0 91 0d 01 	lds	r26, 0x010D	; 0x80010d <delay_cnt+0x2>
     75e:	b0 91 0e 01 	lds	r27, 0x010E	; 0x80010e <delay_cnt+0x3>
     762:	0a 97       	sbiw	r24, 0x0a	; 10
     764:	a1 05       	cpc	r26, r1
     766:	b1 05       	cpc	r27, r1
     768:	08 f2       	brcs	.-126    	; 0x6ec <main+0x86>
					music=STOP;
     76a:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
	   sei();
	   uint32_t i=0;
	   uint32_t tim=0;

	   for(;;){
		switch(my_state_machine){
     76e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <my_state_machine>
     772:	85 30       	cpi	r24, 0x05	; 5
     774:	09 f0       	breq	.+2      	; 0x778 <main+0x112>
     776:	bf cf       	rjmp	.-130    	; 0x6f6 <main+0x90>
				break;
			case DECODE:
				// 1-9 (vrednosti od 0 do 8)
				// STANDBY = 12
				// play = 68
				if(contr >= 0 && contr < NUM_SONGS){
     778:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <contr>
     77c:	82 30       	cpi	r24, 0x02	; 2
     77e:	08 f4       	brcc	.+2      	; 0x782 <main+0x11c>
     780:	74 c1       	rjmp	.+744    	; 0xa6a <__stack+0x16b>
					light_flag=0;
					//i=song_indeces[song];
					song_flag=0;
					i=pgm_read_word(&song_indeces[song]);
				}
				if(contr==8){
     782:	88 30       	cpi	r24, 0x08	; 8
     784:	09 f4       	brne	.+2      	; 0x788 <main+0x122>
     786:	69 c1       	rjmp	.+722    	; 0xa5a <__stack+0x15b>
					light_flag=!light_flag;
				}
				else if(contr==14){
     788:	8e 30       	cpi	r24, 0x0E	; 14
     78a:	09 f4       	brne	.+2      	; 0x78e <main+0x128>
     78c:	b3 c1       	rjmp	.+870    	; 0xaf4 <__stack+0x1f5>
					song_flag=!song_flag;
					light_flag=song_flag;
				}
				else if(contr==12) CLEARBIT(LED6_PORT, LED6);
     78e:	8c 30       	cpi	r24, 0x0C	; 12
     790:	09 f4       	brne	.+2      	; 0x794 <main+0x12e>
     792:	7d c1       	rjmp	.+762    	; 0xa8e <__stack+0x18f>
				else;
				my_light=SONG;
     794:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <my_light>
				my_state_machine=IDLE;
     798:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <my_state_machine>
     79c:	09 e1       	ldi	r16, 0x19	; 25
     79e:	11 e0       	ldi	r17, 0x01	; 1
				if(contr >= 0 && contr < NUM_SONGS){
					song=contr;
					light_flag=0;
					//i=song_indeces[song];
					song_flag=0;
					i=pgm_read_word(&song_indeces[song]);
     7a0:	40 e0       	ldi	r20, 0x00	; 0
     7a2:	50 e0       	ldi	r21, 0x00	; 0
		}

		switch(my_light){
			case SONG:
				for (uint8_t n=0; n<LED_NUM;n++){
					if(n==song)leds[n].value=0;
     7a4:	8a 2d       	mov	r24, r10
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	1c 01       	movw	r2, r24
     7aa:	22 0c       	add	r2, r2
     7ac:	33 1c       	adc	r3, r3
     7ae:	22 0c       	add	r2, r2
     7b0:	33 1c       	adc	r3, r3
     7b2:	22 0c       	add	r2, r2
     7b4:	33 1c       	adc	r3, r3
     7b6:	82 0d       	add	r24, r2
     7b8:	93 1d       	adc	r25, r3
     7ba:	dc 01       	movw	r26, r24
     7bc:	a2 5e       	subi	r26, 0xE2	; 226
     7be:	be 4f       	sbci	r27, 0xFE	; 254
     7c0:	1d 01       	movw	r2, r26
     7c2:	a4 16       	cp	r10, r20
     7c4:	09 f4       	brne	.+2      	; 0x7c8 <main+0x162>
     7c6:	23 c2       	rjmp	.+1094   	; 0xc0e <__stack+0x30f>
					else leds[n].value=1;
     7c8:	fa 01       	movw	r30, r20
     7ca:	ee 0f       	add	r30, r30
     7cc:	ff 1f       	adc	r31, r31
     7ce:	ee 0f       	add	r30, r30
     7d0:	ff 1f       	adc	r31, r31
     7d2:	ee 0f       	add	r30, r30
     7d4:	ff 1f       	adc	r31, r31
     7d6:	e4 0f       	add	r30, r20
     7d8:	f5 1f       	adc	r31, r21
     7da:	e7 5e       	subi	r30, 0xE7	; 231
     7dc:	fe 4f       	sbci	r31, 0xFE	; 254
     7de:	b5 82       	std	Z+5, r11	; 0x05
					SetValue(&leds[n]);
     7e0:	c8 01       	movw	r24, r16
     7e2:	4d 83       	std	Y+5, r20	; 0x05
     7e4:	5e 83       	std	Y+6, r21	; 0x06
     7e6:	0e 94 0e 02 	call	0x41c	; 0x41c <SetValue>
     7ea:	4d 81       	ldd	r20, Y+5	; 0x05
     7ec:	5e 81       	ldd	r21, Y+6	; 0x06
     7ee:	4f 5f       	subi	r20, 0xFF	; 255
     7f0:	5f 4f       	sbci	r21, 0xFF	; 255
     7f2:	07 5f       	subi	r16, 0xF7	; 247
     7f4:	1f 4f       	sbci	r17, 0xFF	; 255
				break;
		}

		switch(my_light){
			case SONG:
				for (uint8_t n=0; n<LED_NUM;n++){
     7f6:	48 30       	cpi	r20, 0x08	; 8
     7f8:	51 05       	cpc	r21, r1
     7fa:	19 f7       	brne	.-58     	; 0x7c2 <main+0x15c>
					if(n==song)leds[n].value=0;
					else leds[n].value=1;
					SetValue(&leds[n]);
				}
				my_light=CLEAR;
     7fc:	b0 92 09 01 	sts	0x0109, r11	; 0x800109 <my_light>
//			while(pgm_read_word(&kuza_pazi_song[i][2]) && song_flag==1){
//						playnote(pgm_read_word(&kuza_pazi_song[i][1]),pgm_read_word(&kuza_pazi_song[i][0]),pgm_read_word(&kuza_pazi_song[i][2])*tempo);
//						//playnote(A3_PRESC, A3, 4000);
//						i++;
//					}
		switch(music){
     800:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
     804:	81 30       	cpi	r24, 0x01	; 1
     806:	09 f0       	breq	.+2      	; 0x80a <main+0x1a4>
     808:	9f cf       	rjmp	.-194    	; 0x748 <main+0xe2>
					tempo=pgm_read_word(&songs[i-1][0]);
				}

				break;
			case PLAY:
				if(delay_cnt >= tim || song_flag==0){
     80a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <delay_cnt>
     80e:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <delay_cnt+0x1>
     812:	a0 91 0d 01 	lds	r26, 0x010D	; 0x80010d <delay_cnt+0x2>
     816:	b0 91 0e 01 	lds	r27, 0x010E	; 0x80010e <delay_cnt+0x3>
     81a:	84 15       	cp	r24, r4
     81c:	95 05       	cpc	r25, r5
     81e:	a6 05       	cpc	r26, r6
     820:	b7 05       	cpc	r27, r7
     822:	20 f4       	brcc	.+8      	; 0x82c <main+0x1c6>
     824:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <song_flag>
     828:	81 11       	cpse	r24, r1
     82a:	14 c0       	rjmp	.+40     	; 0x854 <main+0x1ee>
					TIMER0_STOP;
     82c:	85 b5       	in	r24, 0x25	; 37
     82e:	88 7f       	andi	r24, 0xF8	; 248
     830:	85 bd       	out	0x25, r24	; 37
					delay_cnt=0;
     832:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <delay_cnt>
     836:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <delay_cnt+0x1>
     83a:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <delay_cnt+0x2>
     83e:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <delay_cnt+0x3>
					TCNT2=0;
     842:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
					i++;
     846:	9f ef       	ldi	r25, 0xFF	; 255
     848:	c9 1a       	sub	r12, r25
     84a:	d9 0a       	sbc	r13, r25
     84c:	e9 0a       	sbc	r14, r25
     84e:	f9 0a       	sbc	r15, r25
					music=PAUSE;
     850:	80 92 08 01 	sts	0x0108, r8	; 0x800108 <__data_end>
				}
				if(i==pgm_read_word(&song_indeces[song+1])){
     854:	8a 2d       	mov	r24, r10
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	fc 01       	movw	r30, r24
     85a:	ee 0f       	add	r30, r30
     85c:	ff 1f       	adc	r31, r31
     85e:	e6 59       	subi	r30, 0x96	; 150
     860:	ff 4f       	sbci	r31, 0xFF	; 255
     862:	25 91       	lpm	r18, Z+
     864:	34 91       	lpm	r19, Z
     866:	a9 01       	movw	r20, r18
     868:	60 e0       	ldi	r22, 0x00	; 0
     86a:	70 e0       	ldi	r23, 0x00	; 0
     86c:	4c 15       	cp	r20, r12
     86e:	5d 05       	cpc	r21, r13
     870:	6e 05       	cpc	r22, r14
     872:	7f 05       	cpc	r23, r15
     874:	09 f0       	breq	.+2      	; 0x878 <main+0x212>
     876:	3a cf       	rjmp	.-396    	; 0x6ec <main+0x86>
				   i=pgm_read_word(&song_indeces[song]);
     878:	fc 01       	movw	r30, r24
     87a:	ee 0f       	add	r30, r30
     87c:	ff 1f       	adc	r31, r31
     87e:	e8 59       	subi	r30, 0x98	; 152
     880:	ff 4f       	sbci	r31, 0xFF	; 255
     882:	c5 90       	lpm	r12, Z+
     884:	d4 90       	lpm	r13, Z
     886:	e1 2c       	mov	r14, r1
     888:	f1 2c       	mov	r15, r1
				   song_flag=0;
     88a:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <song_flag>
				   music=STOP;
     88e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
     892:	2c cf       	rjmp	.-424    	; 0x6ec <main+0x86>
//						i++;
//					}
		switch(music){
			case STOP:
			//	if(pgm_read_word(&cuk_song[i][2])!=0 && song_flag==1){
				if(i<pgm_read_word(&song_indeces[song+1]) && song_flag==1){
     894:	8a 2d       	mov	r24, r10
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	fc 01       	movw	r30, r24
     89a:	ee 0f       	add	r30, r30
     89c:	ff 1f       	adc	r31, r31
     89e:	e6 59       	subi	r30, 0x96	; 150
     8a0:	ff 4f       	sbci	r31, 0xFF	; 255
     8a2:	25 91       	lpm	r18, Z+
     8a4:	34 91       	lpm	r19, Z
     8a6:	a9 01       	movw	r20, r18
     8a8:	60 e0       	ldi	r22, 0x00	; 0
     8aa:	70 e0       	ldi	r23, 0x00	; 0
     8ac:	c4 16       	cp	r12, r20
     8ae:	d5 06       	cpc	r13, r21
     8b0:	e6 06       	cpc	r14, r22
     8b2:	f7 06       	cpc	r15, r23
     8b4:	30 f4       	brcc	.+12     	; 0x8c2 <main+0x25c>
     8b6:	30 90 18 01 	lds	r3, 0x0118	; 0x800118 <song_flag>
     8ba:	e1 e0       	ldi	r30, 0x01	; 1
     8bc:	3e 16       	cp	r3, r30
     8be:	09 f4       	brne	.+2      	; 0x8c2 <main+0x25c>
     8c0:	6d c1       	rjmp	.+730    	; 0xb9c <__stack+0x29d>
					TCNT2=0;
					tim=pgm_read_word(&songs[i][2])*tempo;
					music=PLAY;
				}
				else{
					i=pgm_read_word(&song_indeces[song])+1;
     8c2:	fc 01       	movw	r30, r24
     8c4:	ee 0f       	add	r30, r30
     8c6:	ff 1f       	adc	r31, r31
     8c8:	e8 59       	subi	r30, 0x98	; 152
     8ca:	ff 4f       	sbci	r31, 0xFF	; 255
     8cc:	c5 90       	lpm	r12, Z+
     8ce:	d4 90       	lpm	r13, Z
     8d0:	ff ef       	ldi	r31, 0xFF	; 255
     8d2:	cf 1a       	sub	r12, r31
     8d4:	df 0a       	sbc	r13, r31
     8d6:	e1 2c       	mov	r14, r1
     8d8:	f1 2c       	mov	r15, r1
					tempo=pgm_read_word(&songs[i-1][0]);
     8da:	d7 01       	movw	r26, r14
     8dc:	c6 01       	movw	r24, r12
     8de:	01 97       	sbiw	r24, 0x01	; 1
     8e0:	a1 09       	sbc	r26, r1
     8e2:	b1 09       	sbc	r27, r1
     8e4:	fc 01       	movw	r30, r24
     8e6:	ee 0f       	add	r30, r30
     8e8:	ff 1f       	adc	r31, r31
     8ea:	e8 0f       	add	r30, r24
     8ec:	f9 1f       	adc	r31, r25
     8ee:	ee 0f       	add	r30, r30
     8f0:	ff 1f       	adc	r31, r31
     8f2:	e2 59       	subi	r30, 0x92	; 146
     8f4:	ff 4f       	sbci	r31, 0xFF	; 255
     8f6:	25 91       	lpm	r18, Z+
     8f8:	34 91       	lpm	r19, Z
     8fa:	c9 01       	movw	r24, r18
     8fc:	a0 e0       	ldi	r26, 0x00	; 0
     8fe:	b0 e0       	ldi	r27, 0x00	; 0
     900:	89 83       	std	Y+1, r24	; 0x01
     902:	9a 83       	std	Y+2, r25	; 0x02
     904:	ab 83       	std	Y+3, r26	; 0x03
     906:	bc 83       	std	Y+4, r27	; 0x04
     908:	f1 ce       	rjmp	.-542    	; 0x6ec <main+0x86>

					my_light=rand()%5+1;
				}
				break;
			case BLINK_ALL:
				if(count_ovr2>3500){
     90a:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <count_ovr2>
     90e:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <count_ovr2+0x1>
     912:	a0 91 11 01 	lds	r26, 0x0111	; 0x800111 <count_ovr2+0x2>
     916:	b0 91 12 01 	lds	r27, 0x0112	; 0x800112 <count_ovr2+0x3>
     91a:	8d 3a       	cpi	r24, 0xAD	; 173
     91c:	9d 40       	sbci	r25, 0x0D	; 13
     91e:	a1 05       	cpc	r26, r1
     920:	b1 05       	cpc	r27, r1
     922:	08 f4       	brcc	.+2      	; 0x926 <__stack+0x27>
     924:	04 cf       	rjmp	.-504    	; 0x72e <main+0xc8>
				count_ovr2=0;
     926:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <count_ovr2>
     92a:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <count_ovr2+0x1>
     92e:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <count_ovr2+0x2>
     932:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <count_ovr2+0x3>
     936:	09 e1       	ldi	r16, 0x19	; 25
     938:	11 e0       	ldi	r17, 0x01	; 1
     93a:	21 2c       	mov	r2, r1
     93c:	31 2c       	mov	r3, r1
				for (uint8_t n=0; n<LED_NUM;n++){

					leds[n].value= !leds[n].value;
     93e:	c1 01       	movw	r24, r2
     940:	88 0f       	add	r24, r24
     942:	99 1f       	adc	r25, r25
     944:	88 0f       	add	r24, r24
     946:	99 1f       	adc	r25, r25
     948:	88 0f       	add	r24, r24
     94a:	99 1f       	adc	r25, r25
     94c:	fc 01       	movw	r30, r24
     94e:	e2 0d       	add	r30, r2
     950:	f3 1d       	adc	r31, r3
     952:	e7 5e       	subi	r30, 0xE7	; 231
     954:	fe 4f       	sbci	r31, 0xFE	; 254
     956:	35 81       	ldd	r19, Z+5	; 0x05
     958:	21 e0       	ldi	r18, 0x01	; 1
     95a:	31 11       	cpse	r19, r1
     95c:	20 e0       	ldi	r18, 0x00	; 0
     95e:	82 0d       	add	r24, r2
     960:	93 1d       	adc	r25, r3
     962:	fc 01       	movw	r30, r24
     964:	e7 5e       	subi	r30, 0xE7	; 231
     966:	fe 4f       	sbci	r31, 0xFE	; 254
     968:	25 83       	std	Z+5, r18	; 0x05
					SetValue(&leds[n]);
     96a:	c8 01       	movw	r24, r16
     96c:	0e 94 0e 02 	call	0x41c	; 0x41c <SetValue>
     970:	8f ef       	ldi	r24, 0xFF	; 255
     972:	28 1a       	sub	r2, r24
     974:	38 0a       	sbc	r3, r24
     976:	07 5f       	subi	r16, 0xF7	; 247
     978:	1f 4f       	sbci	r17, 0xFF	; 255
				}
				break;
			case BLINK_ALL:
				if(count_ovr2>3500){
				count_ovr2=0;
				for (uint8_t n=0; n<LED_NUM;n++){
     97a:	98 e0       	ldi	r25, 0x08	; 8
     97c:	29 16       	cp	r2, r25
     97e:	31 04       	cpc	r3, r1
     980:	f1 f6       	brne	.-68     	; 0x93e <__stack+0x3f>
     982:	d5 ce       	rjmp	.-598    	; 0x72e <main+0xc8>
					my_light=CLEAR;
					count_ovr1=0;
				}
				break;
			case CIRCLE:
				if(count_ovr2>300){
     984:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <count_ovr2>
     988:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <count_ovr2+0x1>
     98c:	a0 91 11 01 	lds	r26, 0x0111	; 0x800111 <count_ovr2+0x2>
     990:	b0 91 12 01 	lds	r27, 0x0112	; 0x800112 <count_ovr2+0x3>
     994:	8d 32       	cpi	r24, 0x2D	; 45
     996:	91 40       	sbci	r25, 0x01	; 1
     998:	a1 05       	cpc	r26, r1
     99a:	b1 05       	cpc	r27, r1
     99c:	08 f4       	brcc	.+2      	; 0x9a0 <__stack+0xa1>
     99e:	c7 ce       	rjmp	.-626    	; 0x72e <main+0xc8>
				count_ovr2=0;
     9a0:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <count_ovr2>
     9a4:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <count_ovr2+0x1>
     9a8:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <count_ovr2+0x2>
     9ac:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <count_ovr2+0x3>
					if (a==0){
     9b0:	91 10       	cpse	r9, r1
     9b2:	d7 c0       	rjmp	.+430    	; 0xb62 <__stack+0x263>
						leds[a].value=0;
     9b4:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <leds+0x5>
						leds[5].value=1;
     9b8:	b0 92 4b 01 	sts	0x014B, r11	; 0x80014b <leds+0x32>
     9bc:	09 e1       	ldi	r16, 0x19	; 25
     9be:	11 e0       	ldi	r17, 0x01	; 1
					else{
						leds[a].value=0;
						leds[a-1].value=1;
					}
					for (uint8_t n=0; n<LED_NUM;n++){
						SetValue(&leds[n]);
     9c0:	c8 01       	movw	r24, r16
     9c2:	0e 94 0e 02 	call	0x41c	; 0x41c <SetValue>
     9c6:	07 5f       	subi	r16, 0xF7	; 247
     9c8:	1f 4f       	sbci	r17, 0xFF	; 255
					}
					else{
						leds[a].value=0;
						leds[a-1].value=1;
					}
					for (uint8_t n=0; n<LED_NUM;n++){
     9ca:	f1 e0       	ldi	r31, 0x01	; 1
     9cc:	01 36       	cpi	r16, 0x61	; 97
     9ce:	1f 07       	cpc	r17, r31
     9d0:	b9 f7       	brne	.-18     	; 0x9c0 <__stack+0xc1>
						SetValue(&leds[n]);
					}
					if(a==5)a=0;
     9d2:	25 e0       	ldi	r18, 0x05	; 5
     9d4:	92 16       	cp	r9, r18
     9d6:	09 f4       	brne	.+2      	; 0x9da <__stack+0xdb>
     9d8:	3e c0       	rjmp	.+124    	; 0xa56 <__stack+0x157>
					leds[a].value=!leds[a].value;
					for (uint8_t n=0; n<LED_NUM;n++){
						SetValue(&leds[n]);
					}
					if(a==5)a=0;
					else a++;
     9da:	93 94       	inc	r9
     9dc:	a8 ce       	rjmp	.-688    	; 0x72e <main+0xc8>
					my_light=CLEAR;
					count_ovr1=0;
				}
				break;
			case CIRCLE1:
				if(count_ovr2>300){
     9de:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <count_ovr2>
     9e2:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <count_ovr2+0x1>
     9e6:	a0 91 11 01 	lds	r26, 0x0111	; 0x800111 <count_ovr2+0x2>
     9ea:	b0 91 12 01 	lds	r27, 0x0112	; 0x800112 <count_ovr2+0x3>
     9ee:	8d 32       	cpi	r24, 0x2D	; 45
     9f0:	91 40       	sbci	r25, 0x01	; 1
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	08 f4       	brcc	.+2      	; 0x9fa <__stack+0xfb>
     9f8:	9a ce       	rjmp	.-716    	; 0x72e <main+0xc8>
				count_ovr2=0;
     9fa:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <count_ovr2>
     9fe:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <count_ovr2+0x1>
     a02:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <count_ovr2+0x2>
     a06:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <count_ovr2+0x3>
					leds[a].value=!leds[a].value;
     a0a:	89 2d       	mov	r24, r9
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	9c 01       	movw	r18, r24
     a10:	22 0f       	add	r18, r18
     a12:	33 1f       	adc	r19, r19
     a14:	22 0f       	add	r18, r18
     a16:	33 1f       	adc	r19, r19
     a18:	22 0f       	add	r18, r18
     a1a:	33 1f       	adc	r19, r19
     a1c:	f9 01       	movw	r30, r18
     a1e:	e8 0f       	add	r30, r24
     a20:	f9 1f       	adc	r31, r25
     a22:	e7 5e       	subi	r30, 0xE7	; 231
     a24:	fe 4f       	sbci	r31, 0xFE	; 254
     a26:	55 81       	ldd	r21, Z+5	; 0x05
     a28:	41 e0       	ldi	r20, 0x01	; 1
     a2a:	51 11       	cpse	r21, r1
     a2c:	40 e0       	ldi	r20, 0x00	; 0
     a2e:	82 0f       	add	r24, r18
     a30:	93 1f       	adc	r25, r19
     a32:	fc 01       	movw	r30, r24
     a34:	e7 5e       	subi	r30, 0xE7	; 231
     a36:	fe 4f       	sbci	r31, 0xFE	; 254
     a38:	45 83       	std	Z+5, r20	; 0x05
     a3a:	09 e1       	ldi	r16, 0x19	; 25
     a3c:	11 e0       	ldi	r17, 0x01	; 1
					for (uint8_t n=0; n<LED_NUM;n++){
						SetValue(&leds[n]);
     a3e:	c8 01       	movw	r24, r16
     a40:	0e 94 0e 02 	call	0x41c	; 0x41c <SetValue>
     a44:	07 5f       	subi	r16, 0xF7	; 247
     a46:	1f 4f       	sbci	r17, 0xFF	; 255
				break;
			case CIRCLE1:
				if(count_ovr2>300){
				count_ovr2=0;
					leds[a].value=!leds[a].value;
					for (uint8_t n=0; n<LED_NUM;n++){
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	01 36       	cpi	r16, 0x61	; 97
     a4c:	18 07       	cpc	r17, r24
     a4e:	b9 f7       	brne	.-18     	; 0xa3e <__stack+0x13f>
						SetValue(&leds[n]);
					}
					if(a==5)a=0;
     a50:	95 e0       	ldi	r25, 0x05	; 5
     a52:	99 12       	cpse	r9, r25
     a54:	c2 cf       	rjmp	.-124    	; 0x9da <__stack+0xdb>
     a56:	91 2c       	mov	r9, r1
     a58:	6a ce       	rjmp	.-812    	; 0x72e <main+0xc8>
					//i=song_indeces[song];
					song_flag=0;
					i=pgm_read_word(&song_indeces[song]);
				}
				if(contr==8){
					light_flag=!light_flag;
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <light_flag>
     a60:	91 11       	cpse	r25, r1
     a62:	80 e0       	ldi	r24, 0x00	; 0
				}
				else if(contr==14){
					song_flag=!song_flag;
					light_flag=song_flag;
     a64:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <light_flag>
     a68:	95 ce       	rjmp	.-726    	; 0x794 <main+0x12e>
				// 1-9 (vrednosti od 0 do 8)
				// STANDBY = 12
				// play = 68
				if(contr >= 0 && contr < NUM_SONGS){
					song=contr;
					light_flag=0;
     a6a:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <light_flag>
					//i=song_indeces[song];
					song_flag=0;
     a6e:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <song_flag>
					i=pgm_read_word(&song_indeces[song]);
     a72:	e8 2f       	mov	r30, r24
     a74:	f0 e0       	ldi	r31, 0x00	; 0
     a76:	ee 0f       	add	r30, r30
     a78:	ff 1f       	adc	r31, r31
     a7a:	e8 59       	subi	r30, 0x98	; 152
     a7c:	ff 4f       	sbci	r31, 0xFF	; 255
     a7e:	c5 90       	lpm	r12, Z+
     a80:	d4 90       	lpm	r13, Z
     a82:	e1 2c       	mov	r14, r1
     a84:	f1 2c       	mov	r15, r1
     a86:	a8 2e       	mov	r10, r24
				}
				else if(contr==14){
					song_flag=!song_flag;
					light_flag=song_flag;
				}
				else if(contr==12) CLEARBIT(LED6_PORT, LED6);
     a88:	8c 30       	cpi	r24, 0x0C	; 12
     a8a:	09 f0       	breq	.+2      	; 0xa8e <__stack+0x18f>
     a8c:	83 ce       	rjmp	.-762    	; 0x794 <main+0x12e>
     a8e:	2a 98       	cbi	0x05, 2	; 5
     a90:	81 ce       	rjmp	.-766    	; 0x794 <main+0x12e>
				my_light=SONG;
				my_state_machine=IDLE;
				break;
		}

		switch(my_light){
     a92:	88 23       	and	r24, r24
     a94:	09 f4       	brne	.+2      	; 0xa98 <__stack+0x199>
     a96:	82 ce       	rjmp	.-764    	; 0x79c <main+0x136>
     a98:	81 30       	cpi	r24, 0x01	; 1
     a9a:	09 f0       	breq	.+2      	; 0xa9e <__stack+0x19f>
     a9c:	50 ce       	rjmp	.-864    	; 0x73e <main+0xd8>
					SetValue(&leds[n]);
				}
				my_light=CLEAR;
				break;
			case CLEAR:
				if(light_flag==1){
     a9e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <light_flag>
     aa2:	81 30       	cpi	r24, 0x01	; 1
     aa4:	09 f0       	breq	.+2      	; 0xaa8 <__stack+0x1a9>
     aa6:	4b ce       	rjmp	.-874    	; 0x73e <main+0xd8>
     aa8:	09 e1       	ldi	r16, 0x19	; 25
     aaa:	11 e0       	ldi	r17, 0x01	; 1
     aac:	21 2c       	mov	r2, r1
     aae:	31 2c       	mov	r3, r1
					for (uint8_t n=0; n<LED_NUM;n++){
						leds[n].value=1;
     ab0:	f1 01       	movw	r30, r2
     ab2:	ee 0f       	add	r30, r30
     ab4:	ff 1f       	adc	r31, r31
     ab6:	ee 0f       	add	r30, r30
     ab8:	ff 1f       	adc	r31, r31
     aba:	ee 0f       	add	r30, r30
     abc:	ff 1f       	adc	r31, r31
     abe:	e2 0d       	add	r30, r2
     ac0:	f3 1d       	adc	r31, r3
     ac2:	e7 5e       	subi	r30, 0xE7	; 231
     ac4:	fe 4f       	sbci	r31, 0xFE	; 254
     ac6:	b5 82       	std	Z+5, r11	; 0x05
						SetValue(&leds[n]);
     ac8:	c8 01       	movw	r24, r16
     aca:	0e 94 0e 02 	call	0x41c	; 0x41c <SetValue>
     ace:	ff ef       	ldi	r31, 0xFF	; 255
     ad0:	2f 1a       	sub	r2, r31
     ad2:	3f 0a       	sbc	r3, r31
     ad4:	07 5f       	subi	r16, 0xF7	; 247
     ad6:	1f 4f       	sbci	r17, 0xFF	; 255
				}
				my_light=CLEAR;
				break;
			case CLEAR:
				if(light_flag==1){
					for (uint8_t n=0; n<LED_NUM;n++){
     ad8:	28 e0       	ldi	r18, 0x08	; 8
     ada:	22 16       	cp	r2, r18
     adc:	31 04       	cpc	r3, r1
     ade:	41 f7       	brne	.-48     	; 0xab0 <__stack+0x1b1>
						leds[n].value=1;
						SetValue(&leds[n]);
					}

					my_light=rand()%5+1;
     ae0:	0e 94 6e 08 	call	0x10dc	; 0x10dc <rand>
     ae4:	65 e0       	ldi	r22, 0x05	; 5
     ae6:	70 e0       	ldi	r23, 0x00	; 0
     ae8:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <__divmodhi4>
     aec:	8f 5f       	subi	r24, 0xFF	; 255
     aee:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <my_light>
     af2:	25 ce       	rjmp	.-950    	; 0x73e <main+0xd8>
				}
				if(contr==8){
					light_flag=!light_flag;
				}
				else if(contr==14){
					song_flag=!song_flag;
     af4:	81 e0       	ldi	r24, 0x01	; 1
     af6:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <song_flag>
     afa:	91 11       	cpse	r25, r1
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <song_flag>
     b02:	b0 cf       	rjmp	.-160    	; 0xa64 <__stack+0x165>
				}
				break;

			case RAND:
				if(count_ovr2>500){
				count_ovr2=0;
     b04:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <count_ovr2>
     b08:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <count_ovr2+0x1>
     b0c:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <count_ovr2+0x2>
     b10:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <count_ovr2+0x3>
				leds[rand()%8].value=rand()%2;
     b14:	0e 94 6e 08 	call	0x10dc	; 0x10dc <rand>
     b18:	8c 01       	movw	r16, r24
     b1a:	07 70       	andi	r16, 0x07	; 7
     b1c:	10 78       	andi	r17, 0x80	; 128
     b1e:	17 fd       	sbrc	r17, 7
     b20:	6f c0       	rjmp	.+222    	; 0xc00 <__stack+0x301>
     b22:	0e 94 6e 08 	call	0x10dc	; 0x10dc <rand>
     b26:	81 70       	andi	r24, 0x01	; 1
     b28:	90 78       	andi	r25, 0x80	; 128
     b2a:	97 fd       	sbrc	r25, 7
     b2c:	64 c0       	rjmp	.+200    	; 0xbf6 <__stack+0x2f7>
     b2e:	98 01       	movw	r18, r16
     b30:	22 0f       	add	r18, r18
     b32:	33 1f       	adc	r19, r19
     b34:	22 0f       	add	r18, r18
     b36:	33 1f       	adc	r19, r19
     b38:	22 0f       	add	r18, r18
     b3a:	33 1f       	adc	r19, r19
     b3c:	20 0f       	add	r18, r16
     b3e:	31 1f       	adc	r19, r17
     b40:	27 5e       	subi	r18, 0xE7	; 231
     b42:	3e 4f       	sbci	r19, 0xFE	; 254
     b44:	d9 01       	movw	r26, r18
     b46:	15 96       	adiw	r26, 0x05	; 5
     b48:	8c 93       	st	X, r24
     b4a:	09 e1       	ldi	r16, 0x19	; 25
     b4c:	11 e0       	ldi	r17, 0x01	; 1
					for (uint8_t n=0; n<LED_NUM;n++){
						SetValue(&leds[n]);
     b4e:	c8 01       	movw	r24, r16
     b50:	0e 94 0e 02 	call	0x41c	; 0x41c <SetValue>
     b54:	07 5f       	subi	r16, 0xF7	; 247
     b56:	1f 4f       	sbci	r17, 0xFF	; 255

			case RAND:
				if(count_ovr2>500){
				count_ovr2=0;
				leds[rand()%8].value=rand()%2;
					for (uint8_t n=0; n<LED_NUM;n++){
     b58:	b1 e0       	ldi	r27, 0x01	; 1
     b5a:	01 36       	cpi	r16, 0x61	; 97
     b5c:	1b 07       	cpc	r17, r27
     b5e:	b9 f7       	brne	.-18     	; 0xb4e <__stack+0x24f>
     b60:	e6 cd       	rjmp	.-1076   	; 0x72e <main+0xc8>
					if (a==0){
						leds[a].value=0;
						leds[5].value=1;
					}
					else{
						leds[a].value=0;
     b62:	89 2d       	mov	r24, r9
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	fc 01       	movw	r30, r24
     b68:	ee 0f       	add	r30, r30
     b6a:	ff 1f       	adc	r31, r31
     b6c:	ee 0f       	add	r30, r30
     b6e:	ff 1f       	adc	r31, r31
     b70:	ee 0f       	add	r30, r30
     b72:	ff 1f       	adc	r31, r31
     b74:	e8 0f       	add	r30, r24
     b76:	f9 1f       	adc	r31, r25
     b78:	e7 5e       	subi	r30, 0xE7	; 231
     b7a:	fe 4f       	sbci	r31, 0xFE	; 254
     b7c:	15 82       	std	Z+5, r1	; 0x05
						leds[a-1].value=1;
     b7e:	01 97       	sbiw	r24, 0x01	; 1
     b80:	fc 01       	movw	r30, r24
     b82:	ee 0f       	add	r30, r30
     b84:	ff 1f       	adc	r31, r31
     b86:	ee 0f       	add	r30, r30
     b88:	ff 1f       	adc	r31, r31
     b8a:	ee 0f       	add	r30, r30
     b8c:	ff 1f       	adc	r31, r31
     b8e:	8e 0f       	add	r24, r30
     b90:	9f 1f       	adc	r25, r31
     b92:	fc 01       	movw	r30, r24
     b94:	e7 5e       	subi	r30, 0xE7	; 231
     b96:	fe 4f       	sbci	r31, 0xFE	; 254
     b98:	b5 82       	std	Z+5, r11	; 0x05
     b9a:	10 cf       	rjmp	.-480    	; 0x9bc <__stack+0xbd>
		switch(music){
			case STOP:
			//	if(pgm_read_word(&cuk_song[i][2])!=0 && song_flag==1){
				if(i<pgm_read_word(&song_indeces[song+1]) && song_flag==1){
					//playnote(pgm_read_word(&cuk_song[i][1]),pgm_read_word(&cuk_song[i][0]),pgm_read_word(&cuk_song[i][2])*tempo);
					playnote(pgm_read_word(&songs[i][1]),pgm_read_word(&songs[i][0]));
     b9c:	86 01       	movw	r16, r12
     b9e:	00 0f       	add	r16, r16
     ba0:	11 1f       	adc	r17, r17
     ba2:	0c 0d       	add	r16, r12
     ba4:	1d 1d       	adc	r17, r13
     ba6:	00 0f       	add	r16, r16
     ba8:	11 1f       	adc	r17, r17
     baa:	f8 01       	movw	r30, r16
     bac:	e2 59       	subi	r30, 0x92	; 146
     bae:	ff 4f       	sbci	r31, 0xFF	; 255
     bb0:	65 91       	lpm	r22, Z+
     bb2:	74 91       	lpm	r23, Z
     bb4:	f8 01       	movw	r30, r16
     bb6:	e0 59       	subi	r30, 0x90	; 144
     bb8:	ff 4f       	sbci	r31, 0xFF	; 255
     bba:	85 91       	lpm	r24, Z+
     bbc:	94 91       	lpm	r25, Z
     bbe:	0e 94 69 07 	call	0xed2	; 0xed2 <playnote>
					delay_cnt=0;
     bc2:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <delay_cnt>
     bc6:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <delay_cnt+0x1>
     bca:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <delay_cnt+0x2>
     bce:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <delay_cnt+0x3>
					TCNT2=0;
     bd2:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
					tim=pgm_read_word(&songs[i][2])*tempo;
     bd6:	f8 01       	movw	r30, r16
     bd8:	ee 58       	subi	r30, 0x8E	; 142
     bda:	ff 4f       	sbci	r31, 0xFF	; 255
     bdc:	a5 91       	lpm	r26, Z+
     bde:	b4 91       	lpm	r27, Z
     be0:	29 81       	ldd	r18, Y+1	; 0x01
     be2:	3a 81       	ldd	r19, Y+2	; 0x02
     be4:	4b 81       	ldd	r20, Y+3	; 0x03
     be6:	5c 81       	ldd	r21, Y+4	; 0x04
     be8:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__muluhisi3>
     bec:	2b 01       	movw	r4, r22
     bee:	3c 01       	movw	r6, r24
					music=PLAY;
     bf0:	30 92 08 01 	sts	0x0108, r3	; 0x800108 <__data_end>
     bf4:	7b cd       	rjmp	.-1290   	; 0x6ec <main+0x86>
				break;

			case RAND:
				if(count_ovr2>500){
				count_ovr2=0;
				leds[rand()%8].value=rand()%2;
     bf6:	01 97       	sbiw	r24, 0x01	; 1
     bf8:	8e 6f       	ori	r24, 0xFE	; 254
     bfa:	9f 6f       	ori	r25, 0xFF	; 255
     bfc:	01 96       	adiw	r24, 0x01	; 1
     bfe:	97 cf       	rjmp	.-210    	; 0xb2e <__stack+0x22f>
     c00:	01 50       	subi	r16, 0x01	; 1
     c02:	11 09       	sbc	r17, r1
     c04:	08 6f       	ori	r16, 0xF8	; 248
     c06:	1f 6f       	ori	r17, 0xFF	; 255
     c08:	0f 5f       	subi	r16, 0xFF	; 255
     c0a:	1f 4f       	sbci	r17, 0xFF	; 255
     c0c:	8a cf       	rjmp	.-236    	; 0xb22 <__stack+0x223>
		}

		switch(my_light){
			case SONG:
				for (uint8_t n=0; n<LED_NUM;n++){
					if(n==song)leds[n].value=0;
     c0e:	f1 01       	movw	r30, r2
     c10:	10 82       	st	Z, r1
     c12:	e6 cd       	rjmp	.-1076   	; 0x7e0 <main+0x17a>

00000c14 <__vector_4>:
	return 0;
}



ISR(PCINT1_vect){
     c14:	1f 92       	push	r1
     c16:	0f 92       	push	r0
     c18:	0f b6       	in	r0, 0x3f	; 63
     c1a:	0f 92       	push	r0
     c1c:	11 24       	eor	r1, r1
     c1e:	8f 93       	push	r24
     c20:	9f 93       	push	r25
	if(!BITVAL(PINC, BTN)){
     c22:	32 99       	sbic	0x06, 2	; 6
     c24:	09 c0       	rjmp	.+18     	; 0xc38 <__vector_4+0x24>
		song_flag=!song_flag;
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <song_flag>
     c2c:	91 11       	cpse	r25, r1
     c2e:	0b c0       	rjmp	.+22     	; 0xc46 <__vector_4+0x32>
     c30:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <song_flag>
		light_flag=song_flag;
     c34:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <light_flag>
	}
}
     c38:	9f 91       	pop	r25
     c3a:	8f 91       	pop	r24
     c3c:	0f 90       	pop	r0
     c3e:	0f be       	out	0x3f, r0	; 63
     c40:	0f 90       	pop	r0
     c42:	1f 90       	pop	r1
     c44:	18 95       	reti



ISR(PCINT1_vect){
	if(!BITVAL(PINC, BTN)){
		song_flag=!song_flag;
     c46:	80 e0       	ldi	r24, 0x00	; 0
     c48:	f3 cf       	rjmp	.-26     	; 0xc30 <__vector_4+0x1c>

00000c4a <__vector_13>:
		light_flag=song_flag;
	}
}

ISR(TIMER1_OVF_vect){
     c4a:	1f 92       	push	r1
     c4c:	0f 92       	push	r0
     c4e:	0f b6       	in	r0, 0x3f	; 63
     c50:	0f 92       	push	r0
     c52:	11 24       	eor	r1, r1
     c54:	8f 93       	push	r24
	count_ovr1++;
     c56:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <count_ovr1>
     c5a:	8f 5f       	subi	r24, 0xFF	; 255
     c5c:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <count_ovr1>
}
     c60:	8f 91       	pop	r24
     c62:	0f 90       	pop	r0
     c64:	0f be       	out	0x3f, r0	; 63
     c66:	0f 90       	pop	r0
     c68:	1f 90       	pop	r1
     c6a:	18 95       	reti

00000c6c <__vector_8>:

ISR(TIMER2_COMPB_vect){
     c6c:	1f 92       	push	r1
     c6e:	0f 92       	push	r0
     c70:	0f b6       	in	r0, 0x3f	; 63
     c72:	0f 92       	push	r0
     c74:	11 24       	eor	r1, r1
     c76:	8f 93       	push	r24
     c78:	9f 93       	push	r25
     c7a:	af 93       	push	r26
     c7c:	bf 93       	push	r27
	count_ovr2++;
     c7e:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <count_ovr2>
     c82:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <count_ovr2+0x1>
     c86:	a0 91 11 01 	lds	r26, 0x0111	; 0x800111 <count_ovr2+0x2>
     c8a:	b0 91 12 01 	lds	r27, 0x0112	; 0x800112 <count_ovr2+0x3>
     c8e:	01 96       	adiw	r24, 0x01	; 1
     c90:	a1 1d       	adc	r26, r1
     c92:	b1 1d       	adc	r27, r1
     c94:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <count_ovr2>
     c98:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <count_ovr2+0x1>
     c9c:	a0 93 11 01 	sts	0x0111, r26	; 0x800111 <count_ovr2+0x2>
     ca0:	b0 93 12 01 	sts	0x0112, r27	; 0x800112 <count_ovr2+0x3>
	delay_cnt++;
     ca4:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <delay_cnt>
     ca8:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <delay_cnt+0x1>
     cac:	a0 91 0d 01 	lds	r26, 0x010D	; 0x80010d <delay_cnt+0x2>
     cb0:	b0 91 0e 01 	lds	r27, 0x010E	; 0x80010e <delay_cnt+0x3>
     cb4:	01 96       	adiw	r24, 0x01	; 1
     cb6:	a1 1d       	adc	r26, r1
     cb8:	b1 1d       	adc	r27, r1
     cba:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <delay_cnt>
     cbe:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <delay_cnt+0x1>
     cc2:	a0 93 0d 01 	sts	0x010D, r26	; 0x80010d <delay_cnt+0x2>
     cc6:	b0 93 0e 01 	sts	0x010E, r27	; 0x80010e <delay_cnt+0x3>
}
     cca:	bf 91       	pop	r27
     ccc:	af 91       	pop	r26
     cce:	9f 91       	pop	r25
     cd0:	8f 91       	pop	r24
     cd2:	0f 90       	pop	r0
     cd4:	0f be       	out	0x3f, r0	; 63
     cd6:	0f 90       	pop	r0
     cd8:	1f 90       	pop	r1
     cda:	18 95       	reti

00000cdc <ir>:
	PWM1_64_PRESC;
	TCNT1=0;
	ir();
}

uint8_t ir(){
     cdc:	cf 92       	push	r12
     cde:	df 92       	push	r13
     ce0:	ef 92       	push	r14
     ce2:	ff 92       	push	r15
	switch(my_state_machine){
     ce4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <my_state_machine>
     ce8:	82 30       	cpi	r24, 0x02	; 2
     cea:	09 f4       	brne	.+2      	; 0xcee <ir+0x12>
     cec:	3f c0       	rjmp	.+126    	; 0xd6c <ir+0x90>
     cee:	18 f5       	brcc	.+70     	; 0xd36 <ir+0x5a>
     cf0:	88 23       	and	r24, r24
     cf2:	09 f4       	brne	.+2      	; 0xcf6 <ir+0x1a>
     cf4:	47 c0       	rjmp	.+142    	; 0xd84 <ir+0xa8>
     cf6:	81 30       	cpi	r24, 0x01	; 1
     cf8:	59 f5       	brne	.+86     	; 0xd50 <ir+0x74>
			else{
				my_state_machine=IDLE;
			}
			break;
		case REPEATBIT:
			if(time > 500 && time < 625){
     cfa:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <time>
     cfe:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <time+0x1>
     d02:	85 5f       	subi	r24, 0xF5	; 245
     d04:	91 40       	sbci	r25, 0x01	; 1
     d06:	8c 37       	cpi	r24, 0x7C	; 124
     d08:	91 05       	cpc	r25, r1
     d0a:	40 f5       	brcc	.+80     	; 0xd5c <ir+0x80>
				my_state_machine=READINGPREP;
     d0c:	82 e0       	ldi	r24, 0x02	; 2
     d0e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <my_state_machine>
				bitcnt=0;
     d12:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <bitcnt>
				*irval_p=0x00000000;
     d16:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <irval_p>
     d1a:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <irval_p+0x1>
     d1e:	10 82       	st	Z, r1
     d20:	11 82       	std	Z+1, r1	; 0x01
     d22:	12 82       	std	Z+2, r1	; 0x02
     d24:	13 82       	std	Z+3, r1	; 0x03
				contr=0x00;
     d26:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <contr>
				my_state_machine=DECODE;
				return 1;
			}
			break;
	}
	return 0;
     d2a:	80 e0       	ldi	r24, 0x00	; 0
}
     d2c:	ff 90       	pop	r15
     d2e:	ef 90       	pop	r14
     d30:	df 90       	pop	r13
     d32:	cf 90       	pop	r12
     d34:	08 95       	ret
	TCNT1=0;
	ir();
}

uint8_t ir(){
	switch(my_state_machine){
     d36:	83 30       	cpi	r24, 0x03	; 3
     d38:	99 f1       	breq	.+102    	; 0xda0 <ir+0xc4>
     d3a:	84 30       	cpi	r24, 0x04	; 4
     d3c:	49 f4       	brne	.+18     	; 0xd50 <ir+0x74>
				bitcnt++;
			}
			break;
		case VERIFY:
			if(1){
				my_state_machine=DECODE;
     d3e:	85 e0       	ldi	r24, 0x05	; 5
     d40:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <my_state_machine>
				return 1;
     d44:	81 e0       	ldi	r24, 0x01	; 1
			}
			break;
	}
	return 0;
}
     d46:	ff 90       	pop	r15
     d48:	ef 90       	pop	r14
     d4a:	df 90       	pop	r13
     d4c:	cf 90       	pop	r12
     d4e:	08 95       	ret
				my_state_machine=DECODE;
				return 1;
			}
			break;
	}
	return 0;
     d50:	80 e0       	ldi	r24, 0x00	; 0
}
     d52:	ff 90       	pop	r15
     d54:	ef 90       	pop	r14
     d56:	df 90       	pop	r13
     d58:	cf 90       	pop	r12
     d5a:	08 95       	ret
		case IDLE:
			if(time > 1060 && time < 1200){
				my_state_machine=REPEATBIT;
			}
			else{
				my_state_machine=IDLE;
     d5c:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <my_state_machine>
				my_state_machine=DECODE;
				return 1;
			}
			break;
	}
	return 0;
     d60:	80 e0       	ldi	r24, 0x00	; 0
}
     d62:	ff 90       	pop	r15
     d64:	ef 90       	pop	r14
     d66:	df 90       	pop	r13
     d68:	cf 90       	pop	r12
     d6a:	08 95       	ret
			else{
				my_state_machine=IDLE;
			}
			break;
		case READINGPREP:
			if(time > 45 && time < 90){
     d6c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <time>
     d70:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <time+0x1>
     d74:	8e 97       	sbiw	r24, 0x2e	; 46
     d76:	8c 97       	sbiw	r24, 0x2c	; 44
     d78:	88 f7       	brcc	.-30     	; 0xd5c <ir+0x80>
				my_state_machine=READING;
     d7a:	83 e0       	ldi	r24, 0x03	; 3
     d7c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <my_state_machine>
				my_state_machine=DECODE;
				return 1;
			}
			break;
	}
	return 0;
     d80:	80 e0       	ldi	r24, 0x00	; 0
     d82:	d4 cf       	rjmp	.-88     	; 0xd2c <ir+0x50>
}

uint8_t ir(){
	switch(my_state_machine){
		case IDLE:
			if(time > 1060 && time < 1200){
     d84:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <time>
     d88:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <time+0x1>
     d8c:	85 52       	subi	r24, 0x25	; 37
     d8e:	94 40       	sbci	r25, 0x04	; 4
     d90:	8b 38       	cpi	r24, 0x8B	; 139
     d92:	91 05       	cpc	r25, r1
     d94:	18 f7       	brcc	.-58     	; 0xd5c <ir+0x80>
				my_state_machine=REPEATBIT;
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <my_state_machine>
				my_state_machine=DECODE;
				return 1;
			}
			break;
	}
	return 0;
     d9c:	80 e0       	ldi	r24, 0x00	; 0
     d9e:	c6 cf       	rjmp	.-116    	; 0xd2c <ir+0x50>
			else{
				my_state_machine=IDLE;
			}
			break;
		case READING:
			if(time > 45 && time < 90){
     da0:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <time>
     da4:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <time+0x1>
     da8:	9c 01       	movw	r18, r24
     daa:	2e 52       	subi	r18, 0x2E	; 46
     dac:	31 09       	sbc	r19, r1
     dae:	2c 32       	cpi	r18, 0x2C	; 44
     db0:	31 05       	cpc	r19, r1
     db2:	88 f4       	brcc	.+34     	; 0xdd6 <ir+0xfa>
				my_state_machine=READINGPREP;
     db4:	82 e0       	ldi	r24, 0x02	; 2
     db6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <my_state_machine>
     dba:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <bitcnt>
				my_state_machine=READINGPREP;
			}
			else{
				my_state_machine=IDLE;
			}
			if(bitcnt==31){
     dbe:	8f 31       	cpi	r24, 0x1F	; 31
     dc0:	09 f4       	brne	.+2      	; 0xdc4 <ir+0xe8>
     dc2:	46 c0       	rjmp	.+140    	; 0xe50 <ir+0x174>

				my_state_machine=VERIFY;
			}
			else{
				bitcnt++;
     dc4:	8f 5f       	subi	r24, 0xFF	; 255
     dc6:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <bitcnt>
     dca:	80 e0       	ldi	r24, 0x00	; 0
				return 1;
			}
			break;
	}
	return 0;
}
     dcc:	ff 90       	pop	r15
     dce:	ef 90       	pop	r14
     dd0:	df 90       	pop	r13
     dd2:	cf 90       	pop	r12
     dd4:	08 95       	ret
			break;
		case READING:
			if(time > 45 && time < 90){
				my_state_machine=READINGPREP;
			}
			else if(time > 150 && time < 250){
     dd6:	87 59       	subi	r24, 0x97	; 151
     dd8:	91 09       	sbc	r25, r1
     dda:	83 36       	cpi	r24, 0x63	; 99
     ddc:	91 05       	cpc	r25, r1
     dde:	98 f5       	brcc	.+102    	; 0xe46 <ir+0x16a>
				*irval_p |= (1 << bitcnt);
     de0:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <irval_p>
     de4:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <irval_p+0x1>
     de8:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <bitcnt>
     dec:	a8 2f       	mov	r26, r24
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	21 e0       	ldi	r18, 0x01	; 1
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	a9 01       	movw	r20, r18
     df6:	08 2e       	mov	r0, r24
     df8:	02 c0       	rjmp	.+4      	; 0xdfe <ir+0x122>
     dfa:	44 0f       	add	r20, r20
     dfc:	55 1f       	adc	r21, r21
     dfe:	0a 94       	dec	r0
     e00:	e2 f7       	brpl	.-8      	; 0xdfa <ir+0x11e>
     e02:	05 2e       	mov	r0, r21
     e04:	00 0c       	add	r0, r0
     e06:	66 0b       	sbc	r22, r22
     e08:	77 0b       	sbc	r23, r23
     e0a:	c0 80       	ld	r12, Z
     e0c:	d1 80       	ldd	r13, Z+1	; 0x01
     e0e:	e2 80       	ldd	r14, Z+2	; 0x02
     e10:	f3 80       	ldd	r15, Z+3	; 0x03
     e12:	4c 29       	or	r20, r12
     e14:	5d 29       	or	r21, r13
     e16:	6e 29       	or	r22, r14
     e18:	7f 29       	or	r23, r15
     e1a:	40 83       	st	Z, r20
     e1c:	51 83       	std	Z+1, r21	; 0x01
     e1e:	62 83       	std	Z+2, r22	; 0x02
     e20:	73 83       	std	Z+3, r23	; 0x03
			if(bitcnt>=16 && bitcnt <24)contr|=(1 << (bitcnt-16));
     e22:	90 ef       	ldi	r25, 0xF0	; 240
     e24:	98 0f       	add	r25, r24
     e26:	98 30       	cpi	r25, 0x08	; 8
     e28:	50 f4       	brcc	.+20     	; 0xe3e <ir+0x162>
     e2a:	50 97       	sbiw	r26, 0x10	; 16
     e2c:	01 c0       	rjmp	.+2      	; 0xe30 <ir+0x154>
     e2e:	22 0f       	add	r18, r18
     e30:	aa 95       	dec	r26
     e32:	ea f7       	brpl	.-6      	; 0xe2e <ir+0x152>
     e34:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <contr>
     e38:	29 2b       	or	r18, r25
     e3a:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <contr>
				my_state_machine=READINGPREP;
     e3e:	92 e0       	ldi	r25, 0x02	; 2
     e40:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <my_state_machine>
     e44:	bc cf       	rjmp	.-136    	; 0xdbe <ir+0xe2>
			}
			else{
				my_state_machine=IDLE;
     e46:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <my_state_machine>
     e4a:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <bitcnt>
     e4e:	b7 cf       	rjmp	.-146    	; 0xdbe <ir+0xe2>
			}
			if(bitcnt==31){

				my_state_machine=VERIFY;
     e50:	84 e0       	ldi	r24, 0x04	; 4
     e52:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <my_state_machine>
     e56:	80 e0       	ldi	r24, 0x00	; 0
     e58:	69 cf       	rjmp	.-302    	; 0xd2c <ir+0x50>

00000e5a <__vector_5>:
ISR(TIMER2_COMPB_vect){
	count_ovr2++;
	delay_cnt++;
}

ISR(PCINT2_vect){
     e5a:	1f 92       	push	r1
     e5c:	0f 92       	push	r0
     e5e:	0f b6       	in	r0, 0x3f	; 63
     e60:	0f 92       	push	r0
     e62:	11 24       	eor	r1, r1
     e64:	2f 93       	push	r18
     e66:	3f 93       	push	r19
     e68:	4f 93       	push	r20
     e6a:	5f 93       	push	r21
     e6c:	6f 93       	push	r22
     e6e:	7f 93       	push	r23
     e70:	8f 93       	push	r24
     e72:	9f 93       	push	r25
     e74:	af 93       	push	r26
     e76:	bf 93       	push	r27
     e78:	ef 93       	push	r30
     e7a:	ff 93       	push	r31
	TOGGLEBIT(LED3_PORT, LED3);
     e7c:	98 b1       	in	r25, 0x08	; 8
     e7e:	82 e0       	ldi	r24, 0x02	; 2
     e80:	89 27       	eor	r24, r25
     e82:	88 b9       	out	0x08, r24	; 8
	time = TCNT1;
     e84:	a4 e8       	ldi	r26, 0x84	; 132
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	8d 91       	ld	r24, X+
     e8a:	9c 91       	ld	r25, X
     e8c:	11 97       	sbiw	r26, 0x01	; 1
     e8e:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <time+0x1>
     e92:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <time>
	PWM1_64_PRESC;
     e96:	e1 e8       	ldi	r30, 0x81	; 129
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	8b 7f       	andi	r24, 0xFB	; 251
     e9e:	80 83       	st	Z, r24
     ea0:	80 81       	ld	r24, Z
     ea2:	83 60       	ori	r24, 0x03	; 3
     ea4:	80 83       	st	Z, r24
	TCNT1=0;
     ea6:	11 96       	adiw	r26, 0x01	; 1
     ea8:	1c 92       	st	X, r1
     eaa:	1e 92       	st	-X, r1
	ir();
     eac:	0e 94 6e 06 	call	0xcdc	; 0xcdc <ir>
}
     eb0:	ff 91       	pop	r31
     eb2:	ef 91       	pop	r30
     eb4:	bf 91       	pop	r27
     eb6:	af 91       	pop	r26
     eb8:	9f 91       	pop	r25
     eba:	8f 91       	pop	r24
     ebc:	7f 91       	pop	r23
     ebe:	6f 91       	pop	r22
     ec0:	5f 91       	pop	r21
     ec2:	4f 91       	pop	r20
     ec4:	3f 91       	pop	r19
     ec6:	2f 91       	pop	r18
     ec8:	0f 90       	pop	r0
     eca:	0f be       	out	0x3f, r0	; 63
     ecc:	0f 90       	pop	r0
     ece:	1f 90       	pop	r1
     ed0:	18 95       	reti

00000ed2 <playnote>:
//	delay_ms(time);
//	TIMER0_STOP;
//	delay_ms(10);
//}

void playnote(uint16_t prescaler, uint16_t note){
     ed2:	cf 93       	push	r28
     ed4:	df 93       	push	r29
     ed6:	1f 92       	push	r1
     ed8:	cd b7       	in	r28, 0x3d	; 61
     eda:	de b7       	in	r29, 0x3e	; 62
	PWM0presc(prescaler);
     edc:	69 83       	std	Y+1, r22	; 0x01
     ede:	0e 94 88 07 	call	0xf10	; 0xf10 <PWM0presc>
	TCNT0=0;
     ee2:	16 bc       	out	0x26, r1	; 38
	OCR0A=note;
     ee4:	69 81       	ldd	r22, Y+1	; 0x01
     ee6:	67 bd       	out	0x27, r22	; 39
	//delay_cnt=0;
	//TCNT2=0;
	//delay_ms(time);
	//TIMER0_STOP;
	//delay_ms(10);
}
     ee8:	0f 90       	pop	r0
     eea:	df 91       	pop	r29
     eec:	cf 91       	pop	r28
     eee:	08 95       	ret

00000ef0 <PWMCfg>:

/*******************************
 ***KONFIGURACIJSKA FUNKCIJA****
 *******************************/
void PWMCfg(){
	FASTPWM_OCRA;
     ef0:	84 b5       	in	r24, 0x24	; 36
     ef2:	83 60       	ori	r24, 0x03	; 3
     ef4:	84 bd       	out	0x24, r24	; 36
     ef6:	85 b5       	in	r24, 0x25	; 37
     ef8:	88 60       	ori	r24, 0x08	; 8
     efa:	85 bd       	out	0x25, r24	; 37
	TOGGLE_OC0A;
     efc:	84 b5       	in	r24, 0x24	; 36
     efe:	8f 77       	andi	r24, 0x7F	; 127
     f00:	84 bd       	out	0x24, r24	; 36
     f02:	84 b5       	in	r24, 0x24	; 36
     f04:	80 64       	ori	r24, 0x40	; 64
     f06:	84 bd       	out	0x24, r24	; 36
	TIMER0_STOP;
     f08:	85 b5       	in	r24, 0x25	; 37
     f0a:	88 7f       	andi	r24, 0xF8	; 248
     f0c:	85 bd       	out	0x25, r24	; 37
     f0e:	08 95       	ret

00000f10 <PWM0presc>:
/*******************************
 ************FUNKCIJE***********
 *******************************/
int PWM0presc(uint16_t presc){
	uint8_t out=0;
	switch(presc){
     f10:	80 34       	cpi	r24, 0x40	; 64
     f12:	91 05       	cpc	r25, r1
     f14:	b9 f1       	breq	.+110    	; 0xf84 <PWM0presc+0x74>
     f16:	70 f4       	brcc	.+28     	; 0xf34 <PWM0presc+0x24>
     f18:	81 30       	cpi	r24, 0x01	; 1
     f1a:	91 05       	cpc	r25, r1
     f1c:	51 f1       	breq	.+84     	; 0xf72 <PWM0presc+0x62>
     f1e:	08 97       	sbiw	r24, 0x08	; 8
     f20:	e1 f4       	brne	.+56     	; 0xf5a <PWM0presc+0x4a>
		case 1:
			PWM0_NO_PRESC;
			out=1;
			break;
		case 8:
			PWM0_8_PRESC;
     f22:	85 b5       	in	r24, 0x25	; 37
     f24:	8a 7f       	andi	r24, 0xFA	; 250
     f26:	85 bd       	out	0x25, r24	; 37
     f28:	85 b5       	in	r24, 0x25	; 37
     f2a:	82 60       	ori	r24, 0x02	; 2
     f2c:	85 bd       	out	0x25, r24	; 37
			out=1;
			break;
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	08 95       	ret
/*******************************
 ************FUNKCIJE***********
 *******************************/
int PWM0presc(uint16_t presc){
	uint8_t out=0;
	switch(presc){
     f34:	81 15       	cp	r24, r1
     f36:	21 e0       	ldi	r18, 0x01	; 1
     f38:	92 07       	cpc	r25, r18
     f3a:	91 f0       	breq	.+36     	; 0xf60 <PWM0presc+0x50>
     f3c:	81 15       	cp	r24, r1
     f3e:	94 40       	sbci	r25, 0x04	; 4
     f40:	61 f4       	brne	.+24     	; 0xf5a <PWM0presc+0x4a>
		case 256:
			PWM0_256_PRESC;
			out=1;
			break;
		case 1024:
			PWM0_1024_PRESC;
     f42:	85 b5       	in	r24, 0x25	; 37
     f44:	84 60       	ori	r24, 0x04	; 4
     f46:	85 bd       	out	0x25, r24	; 37
     f48:	85 b5       	in	r24, 0x25	; 37
     f4a:	81 60       	ori	r24, 0x01	; 1
     f4c:	85 bd       	out	0x25, r24	; 37
     f4e:	85 b5       	in	r24, 0x25	; 37
     f50:	8d 7f       	andi	r24, 0xFD	; 253
     f52:	85 bd       	out	0x25, r24	; 37
			out=1;
			break;
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	08 95       	ret
/*******************************
 ************FUNKCIJE***********
 *******************************/
int PWM0presc(uint16_t presc){
	uint8_t out=0;
	switch(presc){
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	90 e0       	ldi	r25, 0x00	; 0
			break;
		default:
			out=0;
	}
	return out;
}
     f5e:	08 95       	ret
		case 64:
			PWM0_64_PRESC;
			out=1;
			break;
		case 256:
			PWM0_256_PRESC;
     f60:	85 b5       	in	r24, 0x25	; 37
     f62:	8c 7f       	andi	r24, 0xFC	; 252
     f64:	85 bd       	out	0x25, r24	; 37
     f66:	85 b5       	in	r24, 0x25	; 37
     f68:	84 60       	ori	r24, 0x04	; 4
     f6a:	85 bd       	out	0x25, r24	; 37
			out=1;
			break;
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	08 95       	ret
 *******************************/
int PWM0presc(uint16_t presc){
	uint8_t out=0;
	switch(presc){
		case 1:
			PWM0_NO_PRESC;
     f72:	85 b5       	in	r24, 0x25	; 37
     f74:	89 7f       	andi	r24, 0xF9	; 249
     f76:	85 bd       	out	0x25, r24	; 37
     f78:	85 b5       	in	r24, 0x25	; 37
     f7a:	81 60       	ori	r24, 0x01	; 1
     f7c:	85 bd       	out	0x25, r24	; 37
			out=1;
			break;
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	08 95       	ret
		case 8:
			PWM0_8_PRESC;
			out=1;
			break;
		case 64:
			PWM0_64_PRESC;
     f84:	85 b5       	in	r24, 0x25	; 37
     f86:	8b 7f       	andi	r24, 0xFB	; 251
     f88:	85 bd       	out	0x25, r24	; 37
     f8a:	85 b5       	in	r24, 0x25	; 37
     f8c:	83 60       	ori	r24, 0x03	; 3
     f8e:	85 bd       	out	0x25, r24	; 37
			out=1;
			break;
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	08 95       	ret

00000f96 <SystemTimerCfg>:

/*******************************
 ***KONFIGURACIJSKE FUNKCIJE****
 *******************************/

void SystemTimerCfg(){
     f96:	08 95       	ret

00000f98 <SystemPrescalerCfg>:
	//PrescalerCfg(clk);

};

void SystemPrescalerCfg(uint8_t clock){
	cli();
     f98:	f8 94       	cli
	CLKPR=(1<<CLKPCE);
     f9a:	e1 e6       	ldi	r30, 0x61	; 97
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 e8       	ldi	r24, 0x80	; 128
     fa0:	80 83       	st	Z, r24
	CLKPR=CLKDIV8;
     fa2:	83 e0       	ldi	r24, 0x03	; 3
     fa4:	80 83       	st	Z, r24
//	SETBIT(CLKPR, CLKPCE);
//	//WRITEALL(CLKPR, 0x80);
//	WRITEALL(CLKPR, clock);
	sei();
     fa6:	78 94       	sei
     fa8:	08 95       	ret

00000faa <delay_ms>:

/*******************************
 **********FUNKCIJE*************
 *******************************/

void delay_ms(uint16_t count) {
     faa:	07 c0       	rjmp	.+14     	; 0xfba <delay_ms+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     fac:	ef ec       	ldi	r30, 0xCF	; 207
     fae:	f7 e0       	ldi	r31, 0x07	; 7
     fb0:	31 97       	sbiw	r30, 0x01	; 1
     fb2:	f1 f7       	brne	.-4      	; 0xfb0 <delay_ms+0x6>
     fb4:	00 c0       	rjmp	.+0      	; 0xfb6 <delay_ms+0xc>
     fb6:	00 00       	nop
     fb8:	01 97       	sbiw	r24, 0x01	; 1
  while(count--) {
     fba:	00 97       	sbiw	r24, 0x00	; 0
     fbc:	b9 f7       	brne	.-18     	; 0xfac <delay_ms+0x2>
     fbe:	08 95       	ret

00000fc0 <__divmodhi4>:
     fc0:	97 fb       	bst	r25, 7
     fc2:	07 2e       	mov	r0, r23
     fc4:	16 f4       	brtc	.+4      	; 0xfca <__divmodhi4+0xa>
     fc6:	00 94       	com	r0
     fc8:	07 d0       	rcall	.+14     	; 0xfd8 <__divmodhi4_neg1>
     fca:	77 fd       	sbrc	r23, 7
     fcc:	09 d0       	rcall	.+18     	; 0xfe0 <__divmodhi4_neg2>
     fce:	0e 94 ff 07 	call	0xffe	; 0xffe <__udivmodhi4>
     fd2:	07 fc       	sbrc	r0, 7
     fd4:	05 d0       	rcall	.+10     	; 0xfe0 <__divmodhi4_neg2>
     fd6:	3e f4       	brtc	.+14     	; 0xfe6 <__divmodhi4_exit>

00000fd8 <__divmodhi4_neg1>:
     fd8:	90 95       	com	r25
     fda:	81 95       	neg	r24
     fdc:	9f 4f       	sbci	r25, 0xFF	; 255
     fde:	08 95       	ret

00000fe0 <__divmodhi4_neg2>:
     fe0:	70 95       	com	r23
     fe2:	61 95       	neg	r22
     fe4:	7f 4f       	sbci	r23, 0xFF	; 255

00000fe6 <__divmodhi4_exit>:
     fe6:	08 95       	ret

00000fe8 <__muluhisi3>:
     fe8:	0e 94 13 08 	call	0x1026	; 0x1026 <__umulhisi3>
     fec:	a5 9f       	mul	r26, r21
     fee:	90 0d       	add	r25, r0
     ff0:	b4 9f       	mul	r27, r20
     ff2:	90 0d       	add	r25, r0
     ff4:	a4 9f       	mul	r26, r20
     ff6:	80 0d       	add	r24, r0
     ff8:	91 1d       	adc	r25, r1
     ffa:	11 24       	eor	r1, r1
     ffc:	08 95       	ret

00000ffe <__udivmodhi4>:
     ffe:	aa 1b       	sub	r26, r26
    1000:	bb 1b       	sub	r27, r27
    1002:	51 e1       	ldi	r21, 0x11	; 17
    1004:	07 c0       	rjmp	.+14     	; 0x1014 <__udivmodhi4_ep>

00001006 <__udivmodhi4_loop>:
    1006:	aa 1f       	adc	r26, r26
    1008:	bb 1f       	adc	r27, r27
    100a:	a6 17       	cp	r26, r22
    100c:	b7 07       	cpc	r27, r23
    100e:	10 f0       	brcs	.+4      	; 0x1014 <__udivmodhi4_ep>
    1010:	a6 1b       	sub	r26, r22
    1012:	b7 0b       	sbc	r27, r23

00001014 <__udivmodhi4_ep>:
    1014:	88 1f       	adc	r24, r24
    1016:	99 1f       	adc	r25, r25
    1018:	5a 95       	dec	r21
    101a:	a9 f7       	brne	.-22     	; 0x1006 <__udivmodhi4_loop>
    101c:	80 95       	com	r24
    101e:	90 95       	com	r25
    1020:	bc 01       	movw	r22, r24
    1022:	cd 01       	movw	r24, r26
    1024:	08 95       	ret

00001026 <__umulhisi3>:
    1026:	a2 9f       	mul	r26, r18
    1028:	b0 01       	movw	r22, r0
    102a:	b3 9f       	mul	r27, r19
    102c:	c0 01       	movw	r24, r0
    102e:	a3 9f       	mul	r26, r19
    1030:	70 0d       	add	r23, r0
    1032:	81 1d       	adc	r24, r1
    1034:	11 24       	eor	r1, r1
    1036:	91 1d       	adc	r25, r1
    1038:	b2 9f       	mul	r27, r18
    103a:	70 0d       	add	r23, r0
    103c:	81 1d       	adc	r24, r1
    103e:	11 24       	eor	r1, r1
    1040:	91 1d       	adc	r25, r1
    1042:	08 95       	ret

00001044 <do_rand>:
    1044:	8f 92       	push	r8
    1046:	9f 92       	push	r9
    1048:	af 92       	push	r10
    104a:	bf 92       	push	r11
    104c:	cf 92       	push	r12
    104e:	df 92       	push	r13
    1050:	ef 92       	push	r14
    1052:	ff 92       	push	r15
    1054:	cf 93       	push	r28
    1056:	df 93       	push	r29
    1058:	ec 01       	movw	r28, r24
    105a:	68 81       	ld	r22, Y
    105c:	79 81       	ldd	r23, Y+1	; 0x01
    105e:	8a 81       	ldd	r24, Y+2	; 0x02
    1060:	9b 81       	ldd	r25, Y+3	; 0x03
    1062:	61 15       	cp	r22, r1
    1064:	71 05       	cpc	r23, r1
    1066:	81 05       	cpc	r24, r1
    1068:	91 05       	cpc	r25, r1
    106a:	21 f4       	brne	.+8      	; 0x1074 <do_rand+0x30>
    106c:	64 e2       	ldi	r22, 0x24	; 36
    106e:	79 ed       	ldi	r23, 0xD9	; 217
    1070:	8b e5       	ldi	r24, 0x5B	; 91
    1072:	97 e0       	ldi	r25, 0x07	; 7
    1074:	2d e1       	ldi	r18, 0x1D	; 29
    1076:	33 ef       	ldi	r19, 0xF3	; 243
    1078:	41 e0       	ldi	r20, 0x01	; 1
    107a:	50 e0       	ldi	r21, 0x00	; 0
    107c:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__divmodsi4>
    1080:	49 01       	movw	r8, r18
    1082:	5a 01       	movw	r10, r20
    1084:	9b 01       	movw	r18, r22
    1086:	ac 01       	movw	r20, r24
    1088:	a7 ea       	ldi	r26, 0xA7	; 167
    108a:	b1 e4       	ldi	r27, 0x41	; 65
    108c:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__muluhisi3>
    1090:	6b 01       	movw	r12, r22
    1092:	7c 01       	movw	r14, r24
    1094:	ac ee       	ldi	r26, 0xEC	; 236
    1096:	b4 ef       	ldi	r27, 0xF4	; 244
    1098:	a5 01       	movw	r20, r10
    109a:	94 01       	movw	r18, r8
    109c:	0e 94 a0 08 	call	0x1140	; 0x1140 <__mulohisi3>
    10a0:	dc 01       	movw	r26, r24
    10a2:	cb 01       	movw	r24, r22
    10a4:	8c 0d       	add	r24, r12
    10a6:	9d 1d       	adc	r25, r13
    10a8:	ae 1d       	adc	r26, r14
    10aa:	bf 1d       	adc	r27, r15
    10ac:	b7 ff       	sbrs	r27, 7
    10ae:	03 c0       	rjmp	.+6      	; 0x10b6 <do_rand+0x72>
    10b0:	01 97       	sbiw	r24, 0x01	; 1
    10b2:	a1 09       	sbc	r26, r1
    10b4:	b0 48       	sbci	r27, 0x80	; 128
    10b6:	88 83       	st	Y, r24
    10b8:	99 83       	std	Y+1, r25	; 0x01
    10ba:	aa 83       	std	Y+2, r26	; 0x02
    10bc:	bb 83       	std	Y+3, r27	; 0x03
    10be:	9f 77       	andi	r25, 0x7F	; 127
    10c0:	df 91       	pop	r29
    10c2:	cf 91       	pop	r28
    10c4:	ff 90       	pop	r15
    10c6:	ef 90       	pop	r14
    10c8:	df 90       	pop	r13
    10ca:	cf 90       	pop	r12
    10cc:	bf 90       	pop	r11
    10ce:	af 90       	pop	r10
    10d0:	9f 90       	pop	r9
    10d2:	8f 90       	pop	r8
    10d4:	08 95       	ret

000010d6 <rand_r>:
    10d6:	0e 94 22 08 	call	0x1044	; 0x1044 <do_rand>
    10da:	08 95       	ret

000010dc <rand>:
    10dc:	80 e0       	ldi	r24, 0x00	; 0
    10de:	91 e0       	ldi	r25, 0x01	; 1
    10e0:	0e 94 22 08 	call	0x1044	; 0x1044 <do_rand>
    10e4:	08 95       	ret

000010e6 <srand>:
    10e6:	a0 e0       	ldi	r26, 0x00	; 0
    10e8:	b0 e0       	ldi	r27, 0x00	; 0
    10ea:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    10ee:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    10f2:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    10f6:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    10fa:	08 95       	ret

000010fc <__divmodsi4>:
    10fc:	05 2e       	mov	r0, r21
    10fe:	97 fb       	bst	r25, 7
    1100:	1e f4       	brtc	.+6      	; 0x1108 <__divmodsi4+0xc>
    1102:	00 94       	com	r0
    1104:	0e 94 95 08 	call	0x112a	; 0x112a <__negsi2>
    1108:	57 fd       	sbrc	r21, 7
    110a:	07 d0       	rcall	.+14     	; 0x111a <__divmodsi4_neg2>
    110c:	0e 94 a5 08 	call	0x114a	; 0x114a <__udivmodsi4>
    1110:	07 fc       	sbrc	r0, 7
    1112:	03 d0       	rcall	.+6      	; 0x111a <__divmodsi4_neg2>
    1114:	4e f4       	brtc	.+18     	; 0x1128 <__divmodsi4_exit>
    1116:	0c 94 95 08 	jmp	0x112a	; 0x112a <__negsi2>

0000111a <__divmodsi4_neg2>:
    111a:	50 95       	com	r21
    111c:	40 95       	com	r20
    111e:	30 95       	com	r19
    1120:	21 95       	neg	r18
    1122:	3f 4f       	sbci	r19, 0xFF	; 255
    1124:	4f 4f       	sbci	r20, 0xFF	; 255
    1126:	5f 4f       	sbci	r21, 0xFF	; 255

00001128 <__divmodsi4_exit>:
    1128:	08 95       	ret

0000112a <__negsi2>:
    112a:	90 95       	com	r25
    112c:	80 95       	com	r24
    112e:	70 95       	com	r23
    1130:	61 95       	neg	r22
    1132:	7f 4f       	sbci	r23, 0xFF	; 255
    1134:	8f 4f       	sbci	r24, 0xFF	; 255
    1136:	9f 4f       	sbci	r25, 0xFF	; 255
    1138:	08 95       	ret

0000113a <__mulshisi3>:
    113a:	b7 ff       	sbrs	r27, 7
    113c:	0c 94 f4 07 	jmp	0xfe8	; 0xfe8 <__muluhisi3>

00001140 <__mulohisi3>:
    1140:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__muluhisi3>
    1144:	82 1b       	sub	r24, r18
    1146:	93 0b       	sbc	r25, r19
    1148:	08 95       	ret

0000114a <__udivmodsi4>:
    114a:	a1 e2       	ldi	r26, 0x21	; 33
    114c:	1a 2e       	mov	r1, r26
    114e:	aa 1b       	sub	r26, r26
    1150:	bb 1b       	sub	r27, r27
    1152:	fd 01       	movw	r30, r26
    1154:	0d c0       	rjmp	.+26     	; 0x1170 <__udivmodsi4_ep>

00001156 <__udivmodsi4_loop>:
    1156:	aa 1f       	adc	r26, r26
    1158:	bb 1f       	adc	r27, r27
    115a:	ee 1f       	adc	r30, r30
    115c:	ff 1f       	adc	r31, r31
    115e:	a2 17       	cp	r26, r18
    1160:	b3 07       	cpc	r27, r19
    1162:	e4 07       	cpc	r30, r20
    1164:	f5 07       	cpc	r31, r21
    1166:	20 f0       	brcs	.+8      	; 0x1170 <__udivmodsi4_ep>
    1168:	a2 1b       	sub	r26, r18
    116a:	b3 0b       	sbc	r27, r19
    116c:	e4 0b       	sbc	r30, r20
    116e:	f5 0b       	sbc	r31, r21

00001170 <__udivmodsi4_ep>:
    1170:	66 1f       	adc	r22, r22
    1172:	77 1f       	adc	r23, r23
    1174:	88 1f       	adc	r24, r24
    1176:	99 1f       	adc	r25, r25
    1178:	1a 94       	dec	r1
    117a:	69 f7       	brne	.-38     	; 0x1156 <__udivmodsi4_loop>
    117c:	60 95       	com	r22
    117e:	70 95       	com	r23
    1180:	80 95       	com	r24
    1182:	90 95       	com	r25
    1184:	9b 01       	movw	r18, r22
    1186:	ac 01       	movw	r20, r24
    1188:	bd 01       	movw	r22, r26
    118a:	cf 01       	movw	r24, r30
    118c:	08 95       	ret

0000118e <_exit>:
    118e:	f8 94       	cli

00001190 <__stop_program>:
    1190:	ff cf       	rjmp	.-2      	; 0x1190 <__stop_program>
